


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             DisplayResult, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000                 IMPORT           getkey
    4 00000000                 IMPORT           sendchar
    5 00000000                 EXPORT           start
    6 00000000                 PRESERVE8
    7 00000000         
    8 00000000         start
    9 00000000         
   10 00000000         startProgram                         ; do 
   11 00000000         ; {
   12 00000000         
   13 00000000 E3A0300A        LDR              R3, =10
   14 00000004 E3A04000        LDR              R4,=0       ; number1
   15 00000008 E3A06000        LDR              R6, =0      ; number2
   16 0000000C E3A07000        LDR              R7, =0      ; operator
   17 00000010         
   18 00000010         read
   19 00000010 EBFFFFFE        BL               getkey      ; read key from con
                                                            sole
   20 00000014 E350000D        CMP              R0, #0x0D   ; while (key != ent
                                                            er)
   21 00000018 0A00001A        BEQ              endReadAgain ; {
   22 0000001C E350001B        CMP              R0, #0x1B
   23 00000020 0A000044        BEQ              endProgram
   24 00000024 EBFFFFFE        BL               sendchar    ;   echo key back t
                                                            o console
   25 00000028         
   26 00000028         ;
   27 00000028         ; do any necessary processing of the key
   28 00000028         ;
   29 00000028         
   30 00000028 E350002A        CMP              R0, #'*'    ;if(input == '*')
   31 0000002C 0A000007        BEQ              multiplyOperator ; multiplyOper
                                                            ator()
   32 00000030 E350002B        CMP              R0, #'+'    ;else if(input == '
                                                            +')
   33 00000034 0A000007        BEQ              addOperator ; addOperator()
   34 00000038 E350002D        CMP              R0, #'-'    ;else if(input == '
                                                            -')
   35 0000003C 0A000007        BEQ              subtractOperator ; subtractOper
                                                            ator()
   36 00000040         
   37 00000040 E0040493        MUL              R4, R3, R4  ; number1 *= 10
   38 00000044 E2400030        SUB              R0, R0, #0x30 ; input -= 48
   39 00000048 E0804004        ADD              R4, R0, R4  ; number1 += input
   40 0000004C         
   41 0000004C EAFFFFEF        B                read        ; read next digit
   42 00000050         
   43 00000050         multiplyOperator                     ; int multiplyOpera
                                                            tor()
   44 00000050 E3A07001        LDR              R7,= 1      ;  operator = 1;
   45 00000054 EA000003        B                endRead
   46 00000058         
   47 00000058         addOperator                          ; int addOperator()
                                                            
   48 00000058 E3A07002        LDR              R7,= 2      ;  operator = 2
   49 0000005C EA000001        B                endRead
   50 00000060         



ARM Macro Assembler    Page 2 


   51 00000060         subtractOperator                     ; subtractOperator(
                                                            )
   52 00000060 E3A07003        LDR              R7,= 3      ;  operator = 3
   53 00000064 EAFFFFFF        B                endRead
   54 00000068         
   55 00000068         endRead
   56 00000068         
   57 00000068         readAgain
   58 00000068         
   59 00000068 EBFFFFFE        BL               getkey      ; read key from con
                                                            sole
   60 0000006C E350000D        CMP              R0, #0x0D   ; while (key != ent
                                                            er)
   61 00000070 0A000004        BEQ              endReadAgain ; {
   62 00000074 EBFFFFFE        BL               sendchar    ;   echo key back t
                                                            o console
   63 00000078         
   64 00000078         ;
   65 00000078         ; do any necessary processing of the key
   66 00000078         ;
   67 00000078         
   68 00000078 E0060693        MUL              R6, R3, R6  ; number2 *= 10
   69 0000007C E2400030        SUB              R0, R0, #0x30 ; input -= 48
   70 00000080 E0806006        ADD              R6, R0, R6  ; number2 += input
   71 00000084         
   72 00000084 EAFFFFF7        B                readAgain
   73 00000088         
   74 00000088         endReadAgain
   75 00000088         
   76 00000088 E3A0003D        LDR              R0, ='='    ; print '='
   77 0000008C EBFFFFFE        BL               sendchar
   78 00000090         
   79 00000090 E3570001        CMP              R7,#1       ;if(operator == 1)
   80 00000094 0A000003        BEQ              multiplyExp ; multiplyExp()
   81 00000098 E3570002        CMP              R7,#2       ;else if(operator =
                                                            = 2)
   82 0000009C 0A000003        BEQ              addExp      ; addExp()
   83 000000A0 E3570003        CMP              R7,#3       ;else if(operator =
                                                            = 3)
   84 000000A4 0A000003        BEQ              subtractExp ; subtractExp()
   85 000000A8         
   86 000000A8         multiplyExp
   87 000000A8 E0050694        MUL              R5, R4, R6  ; result = number1 
                                                            * number2
   88 000000AC EA000003        B                endCalculate
   89 000000B0         
   90 000000B0         addExp
   91 000000B0 E0845006        ADD              R5, R4, R6  ; result = number1 
                                                            + number2
   92 000000B4 EA000001        B                endCalculate
   93 000000B8         
   94 000000B8         subtractExp
   95 000000B8 E0445006        SUB              R5, R4, R6  ; result = number1 
                                                            - number2
   96 000000BC EAFFFFFF        B                endCalculate
   97 000000C0         
   98 000000C0         endCalculate
   99 000000C0         
  100 000000C0 E3A0A030        LDR              R10, =0X30  ;ASCII offset



ARM Macro Assembler    Page 3 


  101 000000C4         
  102 000000C4 E3A08001        LDR              R8, =1      ;testPower = 1
  103 000000C8 E3A0C001        LDR              R12, =1     ;numberOfDigits = 1
                                                             
  104 000000CC         
  105 000000CC         digits                               ;
  106 000000CC E1550008        CMP              R5, R8      ;
  107 000000D0 DA000002        BLE              endDigits   ;  while(result > t
                                                            estPower)
  108 000000D4         ;   {
  109 000000D4 E0080893        MUL              R8, R3, R8  ;    testPower *= 1
                                                            0
  110 000000D8 E28CC001        ADD              R12, R12, #1 ;    numberOfDigit
                                                            s += 1
  111 000000DC EAFFFFFA        B                digits      ;    }
  112 000000E0         endDigits
  113 000000E0         
  114 000000E0         print
  115 000000E0 E3A08001        MOV              R8, #1      ; testPower = 1
  116 000000E4 E3A09001        MOV              R9, #1      ; realPower = 1
  117 000000E8         
  118 000000E8         power
  119 000000E8 E1550008        CMP              R5, R8      ; if(result <= test
                                                            Power)
  120 000000EC DA000002        BLE              endPower    ;  end division
  121 000000F0         ; else
  122 000000F0 E1A09008        MOV              R9, R8      ;   realPower = tes
                                                            tPower
  123 000000F4 E0080893        MUL              R8, R3, R8  ;  testPower *= 10
  124 000000F8 EAFFFFFA        B                power       ;
  125 000000FC         endPower
  126 000000FC         
  127 000000FC E3A0B000        LDR              R11, =0     ; quotient 
  128 00000100         
  129 00000100         divide
  130 00000100 E1550009        CMP              R5, R9      ; while(remainder >
                                                            = power)
  131 00000104 3A000002        BLO              endDivide   ; {
  132 00000108 E0455009        SUB              R5, R5, R9  ;  result = result 
                                                            - realPower
  133 0000010C E28BB001        ADD              R11, R11, #1 ;  quotient++
  134 00000110 EAFFFFFA        B                divide      ; }
  135 00000114         endDivide
  136 00000114         
  137 00000114 E24CC001        SUB              R12, R12, #1 ; numberOfDigits--
                                                            
  138 00000118 E35C0000        CMP              R12, #0     ; if(numberOfDigits
                                                             == 0)
  139 0000011C 0A000002        BEQ              endPrint    ;  end print
  140 00000120         ; else
  141 00000120 E08A000B        ADD              R0, R10, R11 ;  character = ASC
                                                            II offset + quotien
                                                            t
  142 00000124 EBFFFFFE        BL               sendchar    ;  print character
  143 00000128 EAFFFFEC        B                print       ;
  144 0000012C         
  145 0000012C         endPrint
  146 0000012C         
  147 0000012C E3A0000A        LDR              R0, =0xA    ;



ARM Macro Assembler    Page 4 


  148 00000130 EBFFFFFE        BL               sendchar    ; print new line
  149 00000134         
  150 00000134 EAFFFFB1        B                startProgram ; } while (input !
                                                            = escape key)
  151 00000138         
  152 00000138         endProgram
  153 00000138         
  154 00000138 E3A00047        LDR              R0, =0x47   ; print 'G'
  155 0000013C EBFFFFFE        BL               sendchar
  156 00000140 E3A0006F        LDR              R0, =0x6F   ; print 'o'
  157 00000144 EBFFFFFE        BL               sendchar
  158 00000148 E3A0006F        LDR              R0, =0x6F   ; print 'o'
  159 0000014C EBFFFFFE        BL               sendchar
  160 00000150 E3A00064        LDR              R0, =0x64   ; print 'd'
  161 00000154 EBFFFFFE        BL               sendchar
  162 00000158 E3A00062        LDR              R0, =0x62   ; print 'b'
  163 0000015C EBFFFFFE        BL               sendchar
  164 00000160 E3A00079        LDR              R0, =0x79   ; print 'y'
  165 00000164 EBFFFFFE        BL               sendchar
  166 00000168 E3A00065        LDR              R0, =0x65   ; print 'e'
  167 0000016C EBFFFFFE        BL               sendchar
  168 00000170 E3A00021        LDR              R0, =0x21   ; print '!'
  169 00000174 EBFFFFFE        BL               sendchar
  170 00000178         
  171 00000178 EAFFFFFE 
                       stop    B                stop
  172 0000017C         
  173 0000017C                 END
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\d
isplayresult.d -o.\displayresult.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\C
MSIS\Include -IC:\Keil_v5\ARM\INC\Philips --predefine="__EVAL SETA 1" --predefi
ne="__MICROLIB SETA 1" --predefine="__UVISION_VERSION SETA 524" --predefine="NO
_CLOCK_SETUP SETA 1" --predefine="NO_EMC_SETUP SETA 1" --predefine="RAM_INTVEC 
SETA 1" --predefine="RAM_MODE SETA 1" --predefine="REMAP SETA 1" --list=.\displ
ayresult.lst DisplayResult.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DisplayResult 00000000

Symbol: DisplayResult
   Definitions
      At line 1 in file DisplayResult.s
   Uses
      None
Comment: DisplayResult unused
addExp 000000B0

Symbol: addExp
   Definitions
      At line 90 in file DisplayResult.s
   Uses
      At line 82 in file DisplayResult.s
Comment: addExp used once
addOperator 00000058

Symbol: addOperator
   Definitions
      At line 47 in file DisplayResult.s
   Uses
      At line 33 in file DisplayResult.s
Comment: addOperator used once
digits 000000CC

Symbol: digits
   Definitions
      At line 105 in file DisplayResult.s
   Uses
      At line 111 in file DisplayResult.s
Comment: digits used once
divide 00000100

Symbol: divide
   Definitions
      At line 129 in file DisplayResult.s
   Uses
      At line 134 in file DisplayResult.s
Comment: divide used once
endCalculate 000000C0

Symbol: endCalculate
   Definitions
      At line 98 in file DisplayResult.s
   Uses
      At line 88 in file DisplayResult.s
      At line 92 in file DisplayResult.s
      At line 96 in file DisplayResult.s

endDigits 000000E0

Symbol: endDigits
   Definitions
      At line 112 in file DisplayResult.s
   Uses
      At line 107 in file DisplayResult.s
Comment: endDigits used once
endDivide 00000114



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: endDivide
   Definitions
      At line 135 in file DisplayResult.s
   Uses
      At line 131 in file DisplayResult.s
Comment: endDivide used once
endPower 000000FC

Symbol: endPower
   Definitions
      At line 125 in file DisplayResult.s
   Uses
      At line 120 in file DisplayResult.s
Comment: endPower used once
endPrint 0000012C

Symbol: endPrint
   Definitions
      At line 145 in file DisplayResult.s
   Uses
      At line 139 in file DisplayResult.s
Comment: endPrint used once
endProgram 00000138

Symbol: endProgram
   Definitions
      At line 152 in file DisplayResult.s
   Uses
      At line 23 in file DisplayResult.s
Comment: endProgram used once
endRead 00000068

Symbol: endRead
   Definitions
      At line 55 in file DisplayResult.s
   Uses
      At line 45 in file DisplayResult.s
      At line 49 in file DisplayResult.s
      At line 53 in file DisplayResult.s

endReadAgain 00000088

Symbol: endReadAgain
   Definitions
      At line 74 in file DisplayResult.s
   Uses
      At line 21 in file DisplayResult.s
      At line 61 in file DisplayResult.s

multiplyExp 000000A8

Symbol: multiplyExp
   Definitions
      At line 86 in file DisplayResult.s
   Uses
      At line 80 in file DisplayResult.s
Comment: multiplyExp used once
multiplyOperator 00000050



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols


Symbol: multiplyOperator
   Definitions
      At line 43 in file DisplayResult.s
   Uses
      At line 31 in file DisplayResult.s
Comment: multiplyOperator used once
power 000000E8

Symbol: power
   Definitions
      At line 118 in file DisplayResult.s
   Uses
      At line 124 in file DisplayResult.s
Comment: power used once
print 000000E0

Symbol: print
   Definitions
      At line 114 in file DisplayResult.s
   Uses
      At line 143 in file DisplayResult.s
Comment: print used once
read 00000010

Symbol: read
   Definitions
      At line 18 in file DisplayResult.s
   Uses
      At line 41 in file DisplayResult.s
Comment: read used once
readAgain 00000068

Symbol: readAgain
   Definitions
      At line 57 in file DisplayResult.s
   Uses
      At line 72 in file DisplayResult.s
Comment: readAgain used once
start 00000000

Symbol: start
   Definitions
      At line 8 in file DisplayResult.s
   Uses
      At line 5 in file DisplayResult.s
Comment: start used once
startProgram 00000000

Symbol: startProgram
   Definitions
      At line 10 in file DisplayResult.s
   Uses
      At line 150 in file DisplayResult.s
Comment: startProgram used once
stop 00000178

Symbol: stop
   Definitions



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

      At line 171 in file DisplayResult.s
   Uses
      At line 171 in file DisplayResult.s
Comment: stop used once
subtractExp 000000B8

Symbol: subtractExp
   Definitions
      At line 94 in file DisplayResult.s
   Uses
      At line 84 in file DisplayResult.s
Comment: subtractExp used once
subtractOperator 00000060

Symbol: subtractOperator
   Definitions
      At line 51 in file DisplayResult.s
   Uses
      At line 35 in file DisplayResult.s
Comment: subtractOperator used once
24 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

getkey 00000000

Symbol: getkey
   Definitions
      At line 3 in file DisplayResult.s
   Uses
      At line 19 in file DisplayResult.s
      At line 59 in file DisplayResult.s

main 00000000

Symbol: main
   Definitions
      At line 2 in file DisplayResult.s
   Uses
      None
Comment: main unused
sendchar 00000000

Symbol: sendchar
   Definitions
      At line 4 in file DisplayResult.s
   Uses
      At line 24 in file DisplayResult.s
      At line 62 in file DisplayResult.s
      At line 77 in file DisplayResult.s
      At line 142 in file DisplayResult.s
      At line 148 in file DisplayResult.s
      At line 155 in file DisplayResult.s
      At line 157 in file DisplayResult.s
      At line 159 in file DisplayResult.s
      At line 161 in file DisplayResult.s
      At line 163 in file DisplayResult.s
      At line 165 in file DisplayResult.s
      At line 167 in file DisplayResult.s
      At line 169 in file DisplayResult.s

3 symbols
365 symbols in table
