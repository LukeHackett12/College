


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             CalculatorStageThree, CODE, REA
DONLY
    2 00000000                 IMPORT           main
    3 00000000                 IMPORT           getkey
    4 00000000                 IMPORT           sendchar
    5 00000000                 EXPORT           start
    6 00000000                 PRESERVE8
    7 00000000         
    8 00000000         start
    9 00000000         
   10 00000000         startProgram                         ; do 
   11 00000000         ; {
   12 00000000         
   13 00000000 E3A0300A        LDR              R3, =10
   14 00000004 E3A04000        LDR              R4,=0       ; number1
   15 00000008 E3A06000        LDR              R6, =0      ; number2
   16 0000000C E3A07000        LDR              R7, =0      ; operator
   17 00000010         
   18 00000010         read
   19 00000010 EBFFFFFE        BL               getkey      ; read key from con
                                                            sole
   20 00000014 E350001B        CMP              R0, #0x1B   ; 
   21 00000018 0A0000A9        BEQ              endProgram  ; 
   22 0000001C E3500008        CMP              R0, #0x8    ;   if(key == backs
                                                            pace)
   23 00000020 0A000019        BEQ              backspace   ;    check()
   24 00000024 EBFFFFFE        BL               sendchar    ;   echo key back t
                                                            o console
   25 00000028         
   26 00000028         ;
   27 00000028         ; do any necessary processing of the key
   28 00000028         ;
   29 00000028         
   30 00000028 E350002A        CMP              R0, #'*'    ;if(input == '*')
   31 0000002C 0A00000C        BEQ              multiplyOperator ; multiplyOper
                                                            ator()
   32 00000030 E350002B        CMP              R0, #'+'    ;else if(input == '
                                                            +')
   33 00000034 0A00000C        BEQ              addOperator ; addOperator()
   34 00000038 E350002D        CMP              R0, #'-'    ;else if(input == '
                                                            -')
   35 0000003C 0A00000C        BEQ              subtractOperator ; subtractOper
                                                            ator()
   36 00000040 E350002F        CMP              R0, #'/'    ;else if(input == '
                                                            /')
   37 00000044 0A00000C        BEQ              divideOperator 
                                                            ; divideOperator()
   38 00000048 E350005E        CMP              R0, #'^'    ;else if(input == '
                                                            /')
   39 0000004C 0A00000C        BEQ              powerOperator ; powerOperator()
                                                            
   40 00000050         
   41 00000050 E0040493        MUL              R4, R3, R4  ; number1 *= 10
   42 00000054 E2400030        SUB              R0, R0, #0x30 ; input -= ASCII 
                                                            Offset
   43 00000058 E1A05000        MOV              R5, R0      ; lastDigit = input
                                                            
   44 0000005C E0804004        ADD              R4, R0, R4  ; number1 += input
   45 00000060         



ARM Macro Assembler    Page 2 


   46 00000060 EAFFFFEA        B                read        ; read next digit
   47 00000064         
   48 00000064         multiplyOperator                     ; int multiplyOpera
                                                            tor()
   49 00000064 E3A07001        LDR              R7,= 1      ;  operator = 1;
   50 00000068 EA000014        B                endRead
   51 0000006C         
   52 0000006C         addOperator                          ; int addOperator()
                                                            
   53 0000006C E3A07002        LDR              R7,= 2      ;  operator = 2
   54 00000070 EA000012        B                endRead
   55 00000074         
   56 00000074         subtractOperator                     ; subtractOperator(
                                                            )
   57 00000074 E3A07003        LDR              R7,= 3      ;  operator = 3
   58 00000078 EA000010        B                endRead
   59 0000007C         
   60 0000007C         divideOperator                       ; divideOperator()
   61 0000007C E3A07004        LDR              R7,= 4      ;  operator = 4
   62 00000080 EA00000E        B                endRead
   63 00000084         
   64 00000084         powerOperator                        ; divideOperator()
   65 00000084 E3A07005        LDR              R7,= 5      ;  operator = 5
   66 00000088 EA00000C        B                endRead
   67 0000008C         
   68 0000008C         backspace
   69 0000008C EBFFFFFE        BL               sendchar    ; print backspace
   70 00000090 E3A00020        LDR              R0, =0x20   ;
   71 00000094 EBFFFFFE        BL               sendchar    ; print space
   72 00000098 E3A00008        LDR              R0, =0x8    ; 
   73 0000009C EBFFFFFE        BL               sendchar    ; print backspace
   74 000000A0 E0444005        SUB              R4, R4, R5  ; number2 -= lastDi
                                                            git
   75 000000A4         
   76 000000A4 E1A05004        MOV              R5, R4      ; R5 is now equal t
                                                            o the number to div
                                                            ide
   77 000000A8         
   78 000000A8 E3A04000        LDR              R4, =0      ; number1 = quotien
                                                            t
   79 000000AC         
   80 000000AC         removePower
   81 000000AC E355000A        CMP              R5, #10     ; while(remainder >
                                                            = power)
   82 000000B0 3AFFFFD6        BLO              read        ; {
   83 000000B4 E245500A        SUB              R5, R5, #10 ;  remainder = rema
                                                            inder - 10
   84 000000B8 E2844001        ADD              R4, R4, #1  ;  number1++
   85 000000BC EAFFFFFA        B                removePower ; }
   86 000000C0         
   87 000000C0         endRead
   88 000000C0         
   89 000000C0         readAgain
   90 000000C0         
   91 000000C0 EBFFFFFE        BL               getkey      ; read key from con
                                                            sole
   92 000000C4 E350000D        CMP              R0, #0x0D   ; while (key != ent
                                                            er)
   93 000000C8 0A000014        BEQ              endReadAgain ; {



ARM Macro Assembler    Page 3 


   94 000000CC E3500008        CMP              R0, #0x8    ;   if(key == backs
                                                            pace)
   95 000000D0 0A000005        BEQ              backspaceSecond ;    check()
   96 000000D4 EBFFFFFE        BL               sendchar    ; echo key back to 
                                                            console
   97 000000D8         
   98 000000D8         ;
   99 000000D8         ; do any necessary processing of the key
  100 000000D8         ;
  101 000000D8         
  102 000000D8 E0060693        MUL              R6, R3, R6  ; number2 *= 10
  103 000000DC E2400030        SUB              R0, R0, #0x30 ; input -= ASCII 
                                                            offset
  104 000000E0 E1A05000        MOV              R5, R0      ; lastDigit = input
                                                            
  105 000000E4 E0806006        ADD              R6, R0, R6  ; number2 += input
  106 000000E8         
  107 000000E8 EAFFFFF4        B                readAgain
  108 000000EC         
  109 000000EC         backspaceSecond
  110 000000EC EBFFFFFE        BL               sendchar    ; print backspace
  111 000000F0 E3A00020        LDR              R0, =0x20   ;
  112 000000F4 EBFFFFFE        BL               sendchar    ; print space
  113 000000F8 E3A00008        LDR              R0, =0x8    ; 
  114 000000FC EBFFFFFE        BL               sendchar    ; print backspace
  115 00000100 E0466005        SUB              R6, R6, R5  ; number 2 -= lastD
                                                            igit
  116 00000104         
  117 00000104 E1A05006        MOV              R5, R6      ; R5 now equal char
                                                            acter to divide
  118 00000108         
  119 00000108 E3A06000        LDR              R6, =0      ; number2 = quotien
                                                            t
  120 0000010C         
  121 0000010C         removePowerTwo
  122 0000010C E355000A        CMP              R5, #10     ; while(remainder >
                                                            = power)
  123 00000110 3AFFFFEA        BLO              readAgain   ; {
  124 00000114 E245500A        SUB              R5, R5, #10 ;  remainder = rema
                                                            inder - 10
  125 00000118 E2866001        ADD              R6, R6, #1  ;  number2++
  126 0000011C EAFFFFFA        B                removePowerTwo ; }
  127 00000120         
  128 00000120         endReadAgain
  129 00000120         
  130 00000120 E3A05000        LDR              R5, =0x0    ; result = 0
  131 00000124         
  132 00000124 E3A00020        LDR              R0, =' '
  133 00000128 EBFFFFFE        BL               sendchar
  134 0000012C E3A0003D        LDR              R0, ='='
  135 00000130 EBFFFFFE        BL               sendchar
  136 00000134 E3A00020        LDR              R0, =' '
  137 00000138 EBFFFFFE        BL               sendchar
  138 0000013C         
  139 0000013C E3570001        CMP              R7,#1       ;if(operator == 1)
  140 00000140 0A000007        BEQ              multiplyExp ; multiplyExp()
  141 00000144 E3570002        CMP              R7,#2       ;else if(operator =
                                                            = 2)
  142 00000148 0A000007        BEQ              addExp      ; addExp()



ARM Macro Assembler    Page 4 


  143 0000014C E3570003        CMP              R7,#3       ;else if(operator =
                                                            = 3)
  144 00000150 0A000007        BEQ              subtractExp ; subtractExp()
  145 00000154 E3570004        CMP              R7,#4       ;else if(operator =
                                                            = 4)
  146 00000158 0A000007        BEQ              divideExp   ; divideExp()
  147 0000015C E3570005        CMP              R7,#5       ;else if(operator =
                                                            = 5)
  148 00000160 0A00000E        BEQ              powerExp    ; powerExp()
  149 00000164         
  150 00000164         multiplyExp
  151 00000164 E0050694        MUL              R5, R4, R6  ; result = number1 
                                                            * number2
  152 00000168 EA000012        B                endCalculate
  153 0000016C         
  154 0000016C         addExp
  155 0000016C E0845006        ADD              R5, R4, R6  ; result = number1 
                                                            + number2
  156 00000170 EA000010        B                endCalculate
  157 00000174         
  158 00000174         subtractExp
  159 00000174 E0445006        SUB              R5, R4, R6  ; result = number1 
                                                            - number2
  160 00000178 EA00000E        B                endCalculate
  161 0000017C         
  162 0000017C         divideExp
  163 0000017C E3A02000        LDR              R2, =0x0    ; remainder = 0
  164 00000180         
  165 00000180 E1A02004        MOV              R2, R4      ; remainder = numbe
                                                            r1
  166 00000184         
  167 00000184 E3560000        CMP              R6, #0
  168 00000188 0A000042        BEQ              nope
  169 0000018C         
  170 0000018C         subDivide                            ; 
  171 0000018C E1520006        CMP              R2, R6      ; while(remainder >
                                                            = number2)
  172 00000190 3A000008        BLO              endCalculate ; {
  173 00000194 E0422006        SUB              R2, R2, R6  ;  remainder -= num
                                                            ber2
  174 00000198 E2855001        ADD              R5, R5, #1  ;  result += 1
  175 0000019C EAFFFFFA        B                subDivide   ; }
  176 000001A0         
  177 000001A0         powerExp
  178 000001A0 E3A05001        MOV              R5, #1      ; result = 1
  179 000001A4         
  180 000001A4         calcPower
  181 000001A4 E3560000        CMP              R6, #0
  182 000001A8 0A000002        BEQ              endCalculate ; while(number2 !=
                                                             0) {  
  183 000001AC E0050594        MUL              R5, R4, R5  ;  result = result 
                                                            * number1
  184 000001B0 E2466001        SUB              R6, R6, #1  ;   number2 -= 1
  185 000001B4 EAFFFFFA        B                calcPower   ; }
  186 000001B8         
  187 000001B8         endCalculate
  188 000001B8         
  189 000001B8 E3A0A030        LDR              R10, =0X30  ;ASCII offset
  190 000001BC         



ARM Macro Assembler    Page 5 


  191 000001BC         remainderPrint
  192 000001BC         
  193 000001BC E3A0800A        LDR              R8, =10     ;testPower = 1
  194 000001C0 E3A0C001        LDR              R12, =1     ;numberOfDigits = 1
                                                             
  195 000001C4         
  196 000001C4         digits                               ;
  197 000001C4 E1550008        CMP              R5, R8      ;
  198 000001C8 3A000002        BLO              endDigits   ;  while(result > t
                                                            estPower)
  199 000001CC         ;   {
  200 000001CC E0080893        MUL              R8, R3, R8  ;    testPower *= 1
                                                            0
  201 000001D0 E28CC001        ADD              R12, R12, #1 ;    numberOfDigit
                                                            s += 1
  202 000001D4 EAFFFFFA        B                digits      ;    }
  203 000001D8         endDigits
  204 000001D8         
  205 000001D8         print
  206 000001D8 E3A08001        MOV              R8, #1      ; testPower = 10
  207 000001DC E3A09001        MOV              R9, #1      ; realPower = 1
  208 000001E0         
  209 000001E0         power
  210 000001E0 E1550008        CMP              R5, R8      ; if(result <= test
                                                            Power)
  211 000001E4 DA000002        BLE              endPower    ;  end division
  212 000001E8         ; else
  213 000001E8 E1A09008        MOV              R9, R8      ;   realPower = tes
                                                            tPower
  214 000001EC E0080893        MUL              R8, R3, R8  ;  testPower *= 10
  215 000001F0 EAFFFFFA        B                power       ;
  216 000001F4         endPower
  217 000001F4         
  218 000001F4 E3A0B000        LDR              R11, =0     ; quotient 
  219 000001F8         
  220 000001F8         divide
  221 000001F8 E1550009        CMP              R5, R9      ; while(remainder >
                                                            = power)
  222 000001FC 3A000002        BLO              endDivide   ; {
  223 00000200 E0455009        SUB              R5, R5, R9  ;  result = result 
                                                            - realPower
  224 00000204 E28BB001        ADD              R11, R11, #1 ;  quotient++
  225 00000208 EAFFFFFA        B                divide      ; }
  226 0000020C         endDivide
  227 0000020C         
  228 0000020C E35C0000        CMP              R12, #0     ; if(numberOfDigits
                                                             == 0)
  229 00000210 0A000003        BEQ              endPrint    ;  end print
  230 00000214         ; else
  231 00000214 E08A000B        ADD              R0, R10, R11 ;  character = ASC
                                                            II offset + quotien
                                                            t
  232 00000218 EBFFFFFE        BL               sendchar    ;  print character
  233 0000021C E24CC001        SUB              R12, R12, #1 ;   numberOfDigits
                                                            --
  234 00000220 EAFFFFEC        B                print       ;
  235 00000224         
  236 00000224         endPrint
  237 00000224         



ARM Macro Assembler    Page 6 


  238 00000224 E3570004        CMP              R7, #4
  239 00000228 1A000022        BNE              notDiv      ; if(operator == /)
                                                            
  240 0000022C         
  241 0000022C E3A07000        LDR              R7, =0      ; operator - 0
  242 00000230         
  243 00000230 E3520000        CMP              R2, #0
  244 00000234 0A00001F        BEQ              notDiv
  245 00000238         
  246 00000238 E3A00020        LDR              R0, =' '
  247 0000023C EBFFFFFE        BL               sendchar
  248 00000240 E3A00052        LDR              R0, ='R'
  249 00000244 EBFFFFFE        BL               sendchar
  250 00000248 E3A00065        LDR              R0, ='e'
  251 0000024C EBFFFFFE        BL               sendchar
  252 00000250 E3A0006D        LDR              R0, ='m'
  253 00000254 EBFFFFFE        BL               sendchar
  254 00000258 E3A00061        LDR              R0, ='a'
  255 0000025C EBFFFFFE        BL               sendchar
  256 00000260 E3A00069        LDR              R0, ='i'
  257 00000264 EBFFFFFE        BL               sendchar
  258 00000268 E3A0006E        LDR              R0, ='n'
  259 0000026C EBFFFFFE        BL               sendchar
  260 00000270 E3A00064        LDR              R0, ='d'
  261 00000274 EBFFFFFE        BL               sendchar
  262 00000278 E3A00065        LDR              R0, ='e'
  263 0000027C EBFFFFFE        BL               sendchar
  264 00000280 E3A00072        LDR              R0, ='r'
  265 00000284 EBFFFFFE        BL               sendchar
  266 00000288 E3A00020        LDR              R0, =' '
  267 0000028C EBFFFFFE        BL               sendchar
  268 00000290 E1A05002        MOV              R5, R2
  269 00000294 EAFFFFC8        B                remainderPrint
  270 00000298         
  271 00000298         nope
  272 00000298 E3A0006E        LDR              R0, ='n'
  273 0000029C EBFFFFFE        BL               sendchar
  274 000002A0 E3A0006F        LDR              R0, ='o'
  275 000002A4 EBFFFFFE        BL               sendchar
  276 000002A8 E3A00070        LDR              R0, ='p'
  277 000002AC EBFFFFFE        BL               sendchar
  278 000002B0 E3A00065        LDR              R0, ='e'
  279 000002B4 EBFFFFFE        BL               sendchar
  280 000002B8         
  281 000002B8         notDiv
  282 000002B8 E3A0000A        LDR              R0, =0xA    ;
  283 000002BC EBFFFFFE        BL               sendchar    ; print new line
  284 000002C0         
  285 000002C0 EAFFFF4E        B                startProgram ; } while (input !
                                                            = escape key)
  286 000002C4         
  287 000002C4         endProgram
  288 000002C4         
  289 000002C4 E3A00047        LDR              R0, ='G'
  290 000002C8 EBFFFFFE        BL               sendchar
  291 000002CC E3A0006F        LDR              R0, ='o'
  292 000002D0 EBFFFFFE        BL               sendchar
  293 000002D4 E3A0006F        LDR              R0, ='o'
  294 000002D8 EBFFFFFE        BL               sendchar



ARM Macro Assembler    Page 7 


  295 000002DC E3A00064        LDR              R0, ='d'
  296 000002E0 EBFFFFFE        BL               sendchar
  297 000002E4 E3A00062        LDR              R0, ='b'
  298 000002E8 EBFFFFFE        BL               sendchar
  299 000002EC E3A00079        LDR              R0, ='y'
  300 000002F0 EBFFFFFE        BL               sendchar
  301 000002F4 E3A00065        LDR              R0, ='e'
  302 000002F8 EBFFFFFE        BL               sendchar
  303 000002FC E3A00021        LDR              R0, ='!'
  304 00000300 EBFFFFFE        BL               sendchar
  305 00000304         
  306 00000304 EAFFFFFE 
                       stop    B                stop
  307 00000308         
  308 00000308                 END
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\d
isplayresult.d -o.\displayresult.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\C
MSIS\Include -IC:\Keil_v5\ARM\INC\Philips --predefine="__EVAL SETA 1" --predefi
ne="__MICROLIB SETA 1" --predefine="__UVISION_VERSION SETA 524" --predefine="NO
_CLOCK_SETUP SETA 1" --predefine="NO_EMC_SETUP SETA 1" --predefine="RAM_INTVEC 
SETA 1" --predefine="RAM_MODE SETA 1" --predefine="REMAP SETA 1" --list=.\displ
ayresult.lst DisplayResult.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

CalculatorStageThree 00000000

Symbol: CalculatorStageThree
   Definitions
      At line 1 in file DisplayResult.s
   Uses
      None
Comment: CalculatorStageThree unused
addExp 0000016C

Symbol: addExp
   Definitions
      At line 154 in file DisplayResult.s
   Uses
      At line 142 in file DisplayResult.s
Comment: addExp used once
addOperator 0000006C

Symbol: addOperator
   Definitions
      At line 52 in file DisplayResult.s
   Uses
      At line 33 in file DisplayResult.s
Comment: addOperator used once
backspace 0000008C

Symbol: backspace
   Definitions
      At line 68 in file DisplayResult.s
   Uses
      At line 23 in file DisplayResult.s
Comment: backspace used once
backspaceSecond 000000EC

Symbol: backspaceSecond
   Definitions
      At line 109 in file DisplayResult.s
   Uses
      At line 95 in file DisplayResult.s
Comment: backspaceSecond used once
calcPower 000001A4

Symbol: calcPower
   Definitions
      At line 180 in file DisplayResult.s
   Uses
      At line 185 in file DisplayResult.s
Comment: calcPower used once
digits 000001C4

Symbol: digits
   Definitions
      At line 196 in file DisplayResult.s
   Uses
      At line 202 in file DisplayResult.s
Comment: digits used once
divide 000001F8

Symbol: divide



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 220 in file DisplayResult.s
   Uses
      At line 225 in file DisplayResult.s
Comment: divide used once
divideExp 0000017C

Symbol: divideExp
   Definitions
      At line 162 in file DisplayResult.s
   Uses
      At line 146 in file DisplayResult.s
Comment: divideExp used once
divideOperator 0000007C

Symbol: divideOperator
   Definitions
      At line 60 in file DisplayResult.s
   Uses
      At line 37 in file DisplayResult.s
Comment: divideOperator used once
endCalculate 000001B8

Symbol: endCalculate
   Definitions
      At line 187 in file DisplayResult.s
   Uses
      At line 152 in file DisplayResult.s
      At line 156 in file DisplayResult.s
      At line 160 in file DisplayResult.s
      At line 172 in file DisplayResult.s
      At line 182 in file DisplayResult.s

endDigits 000001D8

Symbol: endDigits
   Definitions
      At line 203 in file DisplayResult.s
   Uses
      At line 198 in file DisplayResult.s
Comment: endDigits used once
endDivide 0000020C

Symbol: endDivide
   Definitions
      At line 226 in file DisplayResult.s
   Uses
      At line 222 in file DisplayResult.s
Comment: endDivide used once
endPower 000001F4

Symbol: endPower
   Definitions
      At line 216 in file DisplayResult.s
   Uses
      At line 211 in file DisplayResult.s
Comment: endPower used once
endPrint 00000224




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Symbol: endPrint
   Definitions
      At line 236 in file DisplayResult.s
   Uses
      At line 229 in file DisplayResult.s
Comment: endPrint used once
endProgram 000002C4

Symbol: endProgram
   Definitions
      At line 287 in file DisplayResult.s
   Uses
      At line 21 in file DisplayResult.s
Comment: endProgram used once
endRead 000000C0

Symbol: endRead
   Definitions
      At line 87 in file DisplayResult.s
   Uses
      At line 50 in file DisplayResult.s
      At line 54 in file DisplayResult.s
      At line 58 in file DisplayResult.s
      At line 62 in file DisplayResult.s
      At line 66 in file DisplayResult.s

endReadAgain 00000120

Symbol: endReadAgain
   Definitions
      At line 128 in file DisplayResult.s
   Uses
      At line 93 in file DisplayResult.s
Comment: endReadAgain used once
multiplyExp 00000164

Symbol: multiplyExp
   Definitions
      At line 150 in file DisplayResult.s
   Uses
      At line 140 in file DisplayResult.s
Comment: multiplyExp used once
multiplyOperator 00000064

Symbol: multiplyOperator
   Definitions
      At line 48 in file DisplayResult.s
   Uses
      At line 31 in file DisplayResult.s
Comment: multiplyOperator used once
nope 00000298

Symbol: nope
   Definitions
      At line 271 in file DisplayResult.s
   Uses
      At line 168 in file DisplayResult.s
Comment: nope used once
notDiv 000002B8



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols


Symbol: notDiv
   Definitions
      At line 281 in file DisplayResult.s
   Uses
      At line 239 in file DisplayResult.s
      At line 244 in file DisplayResult.s

power 000001E0

Symbol: power
   Definitions
      At line 209 in file DisplayResult.s
   Uses
      At line 215 in file DisplayResult.s
Comment: power used once
powerExp 000001A0

Symbol: powerExp
   Definitions
      At line 177 in file DisplayResult.s
   Uses
      At line 148 in file DisplayResult.s
Comment: powerExp used once
powerOperator 00000084

Symbol: powerOperator
   Definitions
      At line 64 in file DisplayResult.s
   Uses
      At line 39 in file DisplayResult.s
Comment: powerOperator used once
print 000001D8

Symbol: print
   Definitions
      At line 205 in file DisplayResult.s
   Uses
      At line 234 in file DisplayResult.s
Comment: print used once
read 00000010

Symbol: read
   Definitions
      At line 18 in file DisplayResult.s
   Uses
      At line 46 in file DisplayResult.s
      At line 82 in file DisplayResult.s

readAgain 000000C0

Symbol: readAgain
   Definitions
      At line 89 in file DisplayResult.s
   Uses
      At line 107 in file DisplayResult.s
      At line 123 in file DisplayResult.s

remainderPrint 000001BC



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols


Symbol: remainderPrint
   Definitions
      At line 191 in file DisplayResult.s
   Uses
      At line 269 in file DisplayResult.s
Comment: remainderPrint used once
removePower 000000AC

Symbol: removePower
   Definitions
      At line 80 in file DisplayResult.s
   Uses
      At line 85 in file DisplayResult.s
Comment: removePower used once
removePowerTwo 0000010C

Symbol: removePowerTwo
   Definitions
      At line 121 in file DisplayResult.s
   Uses
      At line 126 in file DisplayResult.s
Comment: removePowerTwo used once
start 00000000

Symbol: start
   Definitions
      At line 8 in file DisplayResult.s
   Uses
      At line 5 in file DisplayResult.s
Comment: start used once
startProgram 00000000

Symbol: startProgram
   Definitions
      At line 10 in file DisplayResult.s
   Uses
      At line 285 in file DisplayResult.s
Comment: startProgram used once
stop 00000304

Symbol: stop
   Definitions
      At line 306 in file DisplayResult.s
   Uses
      At line 306 in file DisplayResult.s
Comment: stop used once
subDivide 0000018C

Symbol: subDivide
   Definitions
      At line 170 in file DisplayResult.s
   Uses
      At line 175 in file DisplayResult.s
Comment: subDivide used once
subtractExp 00000174

Symbol: subtractExp
   Definitions



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

      At line 158 in file DisplayResult.s
   Uses
      At line 144 in file DisplayResult.s
Comment: subtractExp used once
subtractOperator 00000074

Symbol: subtractOperator
   Definitions
      At line 56 in file DisplayResult.s
   Uses
      At line 35 in file DisplayResult.s
Comment: subtractOperator used once
37 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

getkey 00000000

Symbol: getkey
   Definitions
      At line 3 in file DisplayResult.s
   Uses
      At line 19 in file DisplayResult.s
      At line 91 in file DisplayResult.s

main 00000000

Symbol: main
   Definitions
      At line 2 in file DisplayResult.s
   Uses
      None
Comment: main unused
sendchar 00000000

Symbol: sendchar
   Definitions
      At line 4 in file DisplayResult.s
   Uses
      At line 24 in file DisplayResult.s
      At line 69 in file DisplayResult.s
      At line 71 in file DisplayResult.s
      At line 73 in file DisplayResult.s
      At line 96 in file DisplayResult.s
      At line 110 in file DisplayResult.s
      At line 112 in file DisplayResult.s
      At line 114 in file DisplayResult.s
      At line 133 in file DisplayResult.s
      At line 135 in file DisplayResult.s
      At line 137 in file DisplayResult.s
      At line 232 in file DisplayResult.s
      At line 247 in file DisplayResult.s
      At line 249 in file DisplayResult.s
      At line 251 in file DisplayResult.s
      At line 253 in file DisplayResult.s
      At line 255 in file DisplayResult.s
      At line 257 in file DisplayResult.s
      At line 259 in file DisplayResult.s
      At line 261 in file DisplayResult.s
      At line 263 in file DisplayResult.s
      At line 265 in file DisplayResult.s
      At line 267 in file DisplayResult.s
      At line 273 in file DisplayResult.s
      At line 275 in file DisplayResult.s
      At line 277 in file DisplayResult.s
      At line 279 in file DisplayResult.s
      At line 283 in file DisplayResult.s
      At line 290 in file DisplayResult.s
      At line 292 in file DisplayResult.s
      At line 294 in file DisplayResult.s
      At line 296 in file DisplayResult.s
      At line 298 in file DisplayResult.s
      At line 300 in file DisplayResult.s
      At line 302 in file DisplayResult.s
      At line 304 in file DisplayResult.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols


3 symbols
378 symbols in table
