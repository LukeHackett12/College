


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             DisplayResult, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000                 IMPORT           getkey
    4 00000000                 IMPORT           sendchar
    5 00000000                 EXPORT           start
    6 00000000                 PRESERVE8
    7 00000000         
    8 00000000         start
    9 00000000         
   10 00000000         startProgram                         ; do 
   11 00000000         ; {
   12 00000000         
   13 00000000 E3A0300A        LDR              R3, =10
   14 00000004 E3A04000        LDR              R4,=0       ; number1
   15 00000008 E3A06000        LDR              R6, =0      ; number2
   16 0000000C E3A07000        LDR              R7, =0      ; operator
   17 00000010         
   18 00000010         read
   19 00000010 EBFFFFFE        BL               getkey      ; read key from con
                                                            sole
   20 00000014 E350001B        CMP              R0, #0x1B   ; 
   21 00000018 0A0000A1        BEQ              endProgram  ; 
   22 0000001C E350000D        CMP              R0, #0x0D   ; while (key != ent
                                                            er)
   23 00000020 0A000040        BEQ              endReadAgain ; {
   24 00000024 E3500008        CMP              R0, #0x8    ;   if(key == backs
                                                            pace)
   25 00000028 0A000019        BEQ              backspace   ;    check()
   26 0000002C EBFFFFFE        BL               sendchar    ;   echo key back t
                                                            o console
   27 00000030         
   28 00000030         ;
   29 00000030         ; do any necessary processing of the key
   30 00000030         ;
   31 00000030         
   32 00000030 E350002A        CMP              R0, #'*'    ;if(input == '*')
   33 00000034 0A00000C        BEQ              multiplyOperator ; multiplyOper
                                                            ator()
   34 00000038 E350002B        CMP              R0, #'+'    ;else if(input == '
                                                            +')
   35 0000003C 0A00000C        BEQ              addOperator ; addOperator()
   36 00000040 E350002D        CMP              R0, #'-'    ;else if(input == '
                                                            -')
   37 00000044 0A00000C        BEQ              subtractOperator ; subtractOper
                                                            ator()
   38 00000048 E350002F        CMP              R0, #'/'    ;else if(input == '
                                                            /')
   39 0000004C 0A00000C        BEQ              divideOperator 
                                                            ; divideOperator()
   40 00000050 E350005E        CMP              R0, #'^'    ;else if(input == '
                                                            /')
   41 00000054 0A00000C        BEQ              powerOperator ; powerOperator()
                                                            
   42 00000058         
   43 00000058 E0040493        MUL              R4, R3, R4  ; number1 *= 10
   44 0000005C E2400030        SUB              R0, R0, #0x30 ; input -= ASCII 
                                                            Offset
   45 00000060 E1A05000        MOV              R5, R0      ; lastDigit = input
                                                            



ARM Macro Assembler    Page 2 


   46 00000064 E0804004        ADD              R4, R0, R4  ; number1 += input
   47 00000068         
   48 00000068 EAFFFFE8        B                read        ; read next digit
   49 0000006C         
   50 0000006C         multiplyOperator                     ; int multiplyOpera
                                                            tor()
   51 0000006C E3A07001        LDR              R7,= 1      ;  operator = 1;
   52 00000070 EA000014        B                endRead
   53 00000074         
   54 00000074         addOperator                          ; int addOperator()
                                                            
   55 00000074 E3A07002        LDR              R7,= 2      ;  operator = 2
   56 00000078 EA000012        B                endRead
   57 0000007C         
   58 0000007C         subtractOperator                     ; subtractOperator(
                                                            )
   59 0000007C E3A07003        LDR              R7,= 3      ;  operator = 3
   60 00000080 EA000010        B                endRead
   61 00000084         
   62 00000084         divideOperator                       ; divideOperator()
   63 00000084 E3A07004        LDR              R7,= 4      ;  operator = 4
   64 00000088 EA00000E        B                endRead
   65 0000008C         
   66 0000008C         powerOperator                        ; divideOperator()
   67 0000008C E3A07005        LDR              R7,= 5      ;  operator = 4
   68 00000090 EA00000C        B                endRead
   69 00000094         
   70 00000094         backspace
   71 00000094 EBFFFFFE        BL               sendchar    ; print backspace
   72 00000098 E3A00020        LDR              R0, =0x20   ;
   73 0000009C EBFFFFFE        BL               sendchar    ; print space
   74 000000A0 E3A00008        LDR              R0, =0x8    ; 
   75 000000A4 EBFFFFFE        BL               sendchar    ; print backspace
   76 000000A8 E0444005        SUB              R4, R4, R5  ; number2 -= lastDi
                                                            git
   77 000000AC         
   78 000000AC E1A05004        MOV              R5, R4      ; R5 is now equal t
                                                            o the number to div
                                                            ide
   79 000000B0         
   80 000000B0 E3A04000        LDR              R4, =0      ; number1 = quotien
                                                            t
   81 000000B4         
   82 000000B4         removePower
   83 000000B4 E355000A        CMP              R5, #10     ; while(remainder >
                                                            = power)
   84 000000B8 3AFFFFD4        BLO              read        ; {
   85 000000BC E245500A        SUB              R5, R5, #10 ;  remainder = rema
                                                            inder - 10
   86 000000C0 E2844001        ADD              R4, R4, #1  ;  number1++
   87 000000C4 EAFFFFFA        B                removePower ; }
   88 000000C8         
   89 000000C8         endRead
   90 000000C8         
   91 000000C8         readAgain
   92 000000C8         
   93 000000C8 EBFFFFFE        BL               getkey      ; read key from con
                                                            sole
   94 000000CC E350000D        CMP              R0, #0x0D   ; while (key != ent



ARM Macro Assembler    Page 3 


                                                            er)
   95 000000D0 0A000014        BEQ              endReadAgain ; {
   96 000000D4 E3500008        CMP              R0, #0x8    ;   if(key == backs
                                                            pace)
   97 000000D8 0A000005        BEQ              backspaceSecond ;    check()
   98 000000DC EBFFFFFE        BL               sendchar    ; echo key back to 
                                                            console
   99 000000E0         
  100 000000E0         ;
  101 000000E0         ; do any necessary processing of the key
  102 000000E0         ;
  103 000000E0         
  104 000000E0 E0060693        MUL              R6, R3, R6  ; number2 *= 10
  105 000000E4 E2400030        SUB              R0, R0, #0x30 ; input -= 48
  106 000000E8 E1A05000        MOV              R5, R0      ; lastDigit = input
                                                            
  107 000000EC E0806006        ADD              R6, R0, R6  ; number2 += input
  108 000000F0         
  109 000000F0 EAFFFFF4        B                readAgain
  110 000000F4         
  111 000000F4         backspaceSecond
  112 000000F4 EBFFFFFE        BL               sendchar    ; print backspace
  113 000000F8 E3A00020        LDR              R0, =0x20   ;
  114 000000FC EBFFFFFE        BL               sendchar    ; print space
  115 00000100 E3A00008        LDR              R0, =0x8    ; 
  116 00000104 EBFFFFFE        BL               sendchar    ; print backspace
  117 00000108 E0466005        SUB              R6, R6, R5  ; number 2 -= lastD
                                                            igit
  118 0000010C         
  119 0000010C E1A05006        MOV              R5, R6      ; R5 now equal char
                                                            acter to divide
  120 00000110         
  121 00000110 E3A06000        LDR              R6, =0      ; number2 = quotien
                                                            t
  122 00000114         
  123 00000114         removePowerTwo
  124 00000114 E355000A        CMP              R5, #10     ; while(remainder >
                                                            = power)
  125 00000118 3AFFFFEA        BLO              readAgain   ; {
  126 0000011C E245500A        SUB              R5, R5, #10 ;  remainder = rema
                                                            inder - 10
  127 00000120 E2866001        ADD              R6, R6, #1  ;  number2++
  128 00000124 EAFFFFFA        B                removePowerTwo ; }
  129 00000128         
  130 00000128         endReadAgain
  131 00000128         
  132 00000128 E3A00020        LDR              R0, =0x20   ; print ' '
  133 0000012C EBFFFFFE        BL               sendchar
  134 00000130 E3A05000        LDR              R5, =0x0    ; result = 0
  135 00000134 E3A0003D        LDR              R0, ='='    ; print '='
  136 00000138 EBFFFFFE        BL               sendchar
  137 0000013C E3A00020        LDR              R0, =0x20   ; print ' '
  138 00000140 EBFFFFFE        BL               sendchar
  139 00000144         
  140 00000144 E3570001        CMP              R7,#1       ;if(operator == 1)
  141 00000148 0A000007        BEQ              multiplyExp ; multiplyExp()
  142 0000014C E3570002        CMP              R7,#2       ;else if(operator =
                                                            = 2)
  143 00000150 0A000007        BEQ              addExp      ; addExp()



ARM Macro Assembler    Page 4 


  144 00000154 E3570003        CMP              R7,#3       ;else if(operator =
                                                            = 3)
  145 00000158 0A000007        BEQ              subtractExp ; subtractExp()
  146 0000015C E3570004        CMP              R7,#4       ;else if(operator =
                                                            = 4)
  147 00000160 0A000007        BEQ              divideExp   ; divideExp()
  148 00000164 E3570005        CMP              R7,#5       ;else if(operator =
                                                            = 5)
  149 00000168 0A00000C        BEQ              powerExp    ; powerExp()
  150 0000016C         
  151 0000016C         multiplyExp
  152 0000016C E0050694        MUL              R5, R4, R6  ; result = number1 
                                                            * number2
  153 00000170 EA000010        B                endCalculate
  154 00000174         
  155 00000174         addExp
  156 00000174 E0845006        ADD              R5, R4, R6  ; result = number1 
                                                            + number2
  157 00000178 EA00000E        B                endCalculate
  158 0000017C         
  159 0000017C         subtractExp
  160 0000017C E0445006        SUB              R5, R4, R6  ; result = number1 
                                                            - number2
  161 00000180 EA00000C        B                endCalculate
  162 00000184         
  163 00000184         divideExp
  164 00000184 E3A02000        LDR              R2, =0x0    ; remainder = 0
  165 00000188         
  166 00000188 E1A02004        MOV              R2, R4      ; remainder = numbe
                                                            r1
  167 0000018C         
  168 0000018C         subDivide                            ; 
  169 0000018C E1520006        CMP              R2, R6      ; while(remainder >
                                                            = number2)
  170 00000190 3A000008        BLO              endCalculate ; {
  171 00000194 E0422006        SUB              R2, R2, R6  ;  remainder -= num
                                                            ber2
  172 00000198 E2855001        ADD              R5, R5, #1  ;  result += 1
  173 0000019C EAFFFFFA        B                subDivide   ; }
  174 000001A0         
  175 000001A0         powerExp
  176 000001A0 E3A05001        MOV              R5, #1
  177 000001A4         
  178 000001A4         calcPower
  179 000001A4 E3560000        CMP              R6, #0
  180 000001A8 0A000002        BEQ              endCalculate
  181 000001AC E0050594        MUL              R5, R4, R5
  182 000001B0 E2466001        SUB              R6, R6, #1
  183 000001B4 EAFFFFFA        B                calcPower
  184 000001B8         
  185 000001B8         endCalculate
  186 000001B8         
  187 000001B8 E3A0A030        LDR              R10, =0X30  ;ASCII offset
  188 000001BC         
  189 000001BC         remainderPrint
  190 000001BC         
  191 000001BC E3A0800A        LDR              R8, =10     ;testPower = 1
  192 000001C0 E3A0C001        LDR              R12, =1     ;numberOfDigits = 1
                                                             



ARM Macro Assembler    Page 5 


  193 000001C4         
  194 000001C4         digits                               ;
  195 000001C4 E1550008        CMP              R5, R8      ;
  196 000001C8 3A000002        BLO              endDigits   ;  while(result > t
                                                            estPower)
  197 000001CC         ;   {
  198 000001CC E0080893        MUL              R8, R3, R8  ;    testPower *= 1
                                                            0
  199 000001D0 E28CC001        ADD              R12, R12, #1 ;    numberOfDigit
                                                            s += 1
  200 000001D4 EAFFFFFA        B                digits      ;    }
  201 000001D8         endDigits
  202 000001D8         
  203 000001D8         print
  204 000001D8 E3A08001        MOV              R8, #1      ; testPower = 1
  205 000001DC E3A09001        MOV              R9, #1      ; realPower = 1
  206 000001E0         
  207 000001E0         power
  208 000001E0 E1550008        CMP              R5, R8      ; if(result <= test
                                                            Power)
  209 000001E4 DA000002        BLE              endPower    ;  end division
  210 000001E8         ; else
  211 000001E8 E1A09008        MOV              R9, R8      ;   realPower = tes
                                                            tPower
  212 000001EC E0080893        MUL              R8, R3, R8  ;  testPower *= 10
  213 000001F0 EAFFFFFA        B                power       ;
  214 000001F4         endPower
  215 000001F4         
  216 000001F4 E3A0B000        LDR              R11, =0     ; quotient 
  217 000001F8         
  218 000001F8         divide
  219 000001F8 E1550009        CMP              R5, R9      ; while(remainder >
                                                            = power)
  220 000001FC 3A000002        BLO              endDivide   ; {
  221 00000200 E0455009        SUB              R5, R5, R9  ;  result = result 
                                                            - realPower
  222 00000204 E28BB001        ADD              R11, R11, #1 ;  quotient++
  223 00000208 EAFFFFFA        B                divide      ; }
  224 0000020C         endDivide
  225 0000020C         
  226 0000020C E35C0000        CMP              R12, #0     ; if(numberOfDigits
                                                             == 0)
  227 00000210 0A000003        BEQ              endPrint    ;  end print
  228 00000214         ; else
  229 00000214 E08A000B        ADD              R0, R10, R11 ;  character = ASC
                                                            II offset + quotien
                                                            t
  230 00000218 EBFFFFFE        BL               sendchar    ;  print character
  231 0000021C E24CC001        SUB              R12, R12, #1 ;   numberOfDigits
                                                            --
  232 00000220 EAFFFFEC        B                print       ;
  233 00000224         
  234 00000224         endPrint
  235 00000224         
  236 00000224 E3570004        CMP              R7, #4
  237 00000228 1A00001A        BNE              notDiv      ; if(operator == /)
                                                            
  238 0000022C         
  239 0000022C E3A07000        LDR              R7, =0      ; operator - 0



ARM Macro Assembler    Page 6 


  240 00000230         
  241 00000230 E3520000        CMP              R2, #0
  242 00000234 0A000017        BEQ              notDiv
  243 00000238         
  244 00000238 E3A00020        LDR              R0, =0x20   ; print ' '
  245 0000023C EBFFFFFE        BL               sendchar
  246 00000240 E3A00052        LDR              R0, =0x52   ; print 'R'
  247 00000244 EBFFFFFE        BL               sendchar
  248 00000248 E3A00065        LDR              R0, =0x65   ; print 'e'
  249 0000024C EBFFFFFE        BL               sendchar
  250 00000250 E3A0006D        LDR              R0, =0x6D   ; print 'm'
  251 00000254 EBFFFFFE        BL               sendchar
  252 00000258 E3A00061        LDR              R0, =0x61   ; print 'a'
  253 0000025C EBFFFFFE        BL               sendchar
  254 00000260 E3A00069        LDR              R0, =0x69   ; print 'i'
  255 00000264 EBFFFFFE        BL               sendchar
  256 00000268 E3A0006E        LDR              R0, =0x6E   ; print 'n'
  257 0000026C EBFFFFFE        BL               sendchar
  258 00000270 E3A00064        LDR              R0, =0x64   ; print 'd'
  259 00000274 EBFFFFFE        BL               sendchar
  260 00000278 E3A00065        LDR              R0, =0x65   ; print 'e'
  261 0000027C EBFFFFFE        BL               sendchar
  262 00000280 E3A00072        LDR              R0, =0x72   ; print 'r'
  263 00000284 EBFFFFFE        BL               sendchar
  264 00000288 E3A00020        LDR              R0, =0x20   ; print ' '
  265 0000028C EBFFFFFE        BL               sendchar
  266 00000290 E1A05002        MOV              R5, R2
  267 00000294 EAFFFFC8        B                remainderPrint
  268 00000298         
  269 00000298         notDiv
  270 00000298 E3A0000A        LDR              R0, =0xA    ;
  271 0000029C EBFFFFFE        BL               sendchar    ; print new line
  272 000002A0         
  273 000002A0 EAFFFF56        B                startProgram ; } while (input !
                                                            = escape key)
  274 000002A4         
  275 000002A4         endProgram
  276 000002A4         
  277 000002A4 E3A00047        LDR              R0, =0x47   ; print 'G'
  278 000002A8 EBFFFFFE        BL               sendchar
  279 000002AC E3A0006F        LDR              R0, =0x6F   ; print 'o'
  280 000002B0 EBFFFFFE        BL               sendchar
  281 000002B4 E3A0006F        LDR              R0, =0x6F   ; print 'o'
  282 000002B8 EBFFFFFE        BL               sendchar
  283 000002BC E3A00064        LDR              R0, =0x64   ; print 'd'
  284 000002C0 EBFFFFFE        BL               sendchar
  285 000002C4 E3A00062        LDR              R0, =0x62   ; print 'b'
  286 000002C8 EBFFFFFE        BL               sendchar
  287 000002CC E3A00079        LDR              R0, =0x79   ; print 'y'
  288 000002D0 EBFFFFFE        BL               sendchar
  289 000002D4 E3A00065        LDR              R0, =0x65   ; print 'e'
  290 000002D8 EBFFFFFE        BL               sendchar
  291 000002DC E3A00021        LDR              R0, =0x21   ; print '!'
  292 000002E0 EBFFFFFE        BL               sendchar
  293 000002E4         
  294 000002E4 EAFFFFFE 
                       stop    B                stop
  295 000002E8         
  296 000002E8                 END



ARM Macro Assembler    Page 7 


Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\d
isplayresult.d -o.\displayresult.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\C
MSIS\Include -IC:\Keil_v5\ARM\INC\Philips --predefine="__EVAL SETA 1" --predefi
ne="__MICROLIB SETA 1" --predefine="__UVISION_VERSION SETA 524" --predefine="NO
_CLOCK_SETUP SETA 1" --predefine="NO_EMC_SETUP SETA 1" --predefine="RAM_INTVEC 
SETA 1" --predefine="RAM_MODE SETA 1" --predefine="REMAP SETA 1" --list=.\displ
ayresult.lst DisplayResult.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DisplayResult 00000000

Symbol: DisplayResult
   Definitions
      At line 1 in file DisplayResult.s
   Uses
      None
Comment: DisplayResult unused
addExp 00000174

Symbol: addExp
   Definitions
      At line 155 in file DisplayResult.s
   Uses
      At line 143 in file DisplayResult.s
Comment: addExp used once
addOperator 00000074

Symbol: addOperator
   Definitions
      At line 54 in file DisplayResult.s
   Uses
      At line 35 in file DisplayResult.s
Comment: addOperator used once
backspace 00000094

Symbol: backspace
   Definitions
      At line 70 in file DisplayResult.s
   Uses
      At line 25 in file DisplayResult.s
Comment: backspace used once
backspaceSecond 000000F4

Symbol: backspaceSecond
   Definitions
      At line 111 in file DisplayResult.s
   Uses
      At line 97 in file DisplayResult.s
Comment: backspaceSecond used once
calcPower 000001A4

Symbol: calcPower
   Definitions
      At line 178 in file DisplayResult.s
   Uses
      At line 183 in file DisplayResult.s
Comment: calcPower used once
digits 000001C4

Symbol: digits
   Definitions
      At line 194 in file DisplayResult.s
   Uses
      At line 200 in file DisplayResult.s
Comment: digits used once
divide 000001F8

Symbol: divide



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 218 in file DisplayResult.s
   Uses
      At line 223 in file DisplayResult.s
Comment: divide used once
divideExp 00000184

Symbol: divideExp
   Definitions
      At line 163 in file DisplayResult.s
   Uses
      At line 147 in file DisplayResult.s
Comment: divideExp used once
divideOperator 00000084

Symbol: divideOperator
   Definitions
      At line 62 in file DisplayResult.s
   Uses
      At line 39 in file DisplayResult.s
Comment: divideOperator used once
endCalculate 000001B8

Symbol: endCalculate
   Definitions
      At line 185 in file DisplayResult.s
   Uses
      At line 153 in file DisplayResult.s
      At line 157 in file DisplayResult.s
      At line 161 in file DisplayResult.s
      At line 170 in file DisplayResult.s
      At line 180 in file DisplayResult.s

endDigits 000001D8

Symbol: endDigits
   Definitions
      At line 201 in file DisplayResult.s
   Uses
      At line 196 in file DisplayResult.s
Comment: endDigits used once
endDivide 0000020C

Symbol: endDivide
   Definitions
      At line 224 in file DisplayResult.s
   Uses
      At line 220 in file DisplayResult.s
Comment: endDivide used once
endPower 000001F4

Symbol: endPower
   Definitions
      At line 214 in file DisplayResult.s
   Uses
      At line 209 in file DisplayResult.s
Comment: endPower used once
endPrint 00000224




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Symbol: endPrint
   Definitions
      At line 234 in file DisplayResult.s
   Uses
      At line 227 in file DisplayResult.s
Comment: endPrint used once
endProgram 000002A4

Symbol: endProgram
   Definitions
      At line 275 in file DisplayResult.s
   Uses
      At line 21 in file DisplayResult.s
Comment: endProgram used once
endRead 000000C8

Symbol: endRead
   Definitions
      At line 89 in file DisplayResult.s
   Uses
      At line 52 in file DisplayResult.s
      At line 56 in file DisplayResult.s
      At line 60 in file DisplayResult.s
      At line 64 in file DisplayResult.s
      At line 68 in file DisplayResult.s

endReadAgain 00000128

Symbol: endReadAgain
   Definitions
      At line 130 in file DisplayResult.s
   Uses
      At line 23 in file DisplayResult.s
      At line 95 in file DisplayResult.s

multiplyExp 0000016C

Symbol: multiplyExp
   Definitions
      At line 151 in file DisplayResult.s
   Uses
      At line 141 in file DisplayResult.s
Comment: multiplyExp used once
multiplyOperator 0000006C

Symbol: multiplyOperator
   Definitions
      At line 50 in file DisplayResult.s
   Uses
      At line 33 in file DisplayResult.s
Comment: multiplyOperator used once
notDiv 00000298

Symbol: notDiv
   Definitions
      At line 269 in file DisplayResult.s
   Uses
      At line 237 in file DisplayResult.s
      At line 242 in file DisplayResult.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols


power 000001E0

Symbol: power
   Definitions
      At line 207 in file DisplayResult.s
   Uses
      At line 213 in file DisplayResult.s
Comment: power used once
powerExp 000001A0

Symbol: powerExp
   Definitions
      At line 175 in file DisplayResult.s
   Uses
      At line 149 in file DisplayResult.s
Comment: powerExp used once
powerOperator 0000008C

Symbol: powerOperator
   Definitions
      At line 66 in file DisplayResult.s
   Uses
      At line 41 in file DisplayResult.s
Comment: powerOperator used once
print 000001D8

Symbol: print
   Definitions
      At line 203 in file DisplayResult.s
   Uses
      At line 232 in file DisplayResult.s
Comment: print used once
read 00000010

Symbol: read
   Definitions
      At line 18 in file DisplayResult.s
   Uses
      At line 48 in file DisplayResult.s
      At line 84 in file DisplayResult.s

readAgain 000000C8

Symbol: readAgain
   Definitions
      At line 91 in file DisplayResult.s
   Uses
      At line 109 in file DisplayResult.s
      At line 125 in file DisplayResult.s

remainderPrint 000001BC

Symbol: remainderPrint
   Definitions
      At line 189 in file DisplayResult.s
   Uses
      At line 267 in file DisplayResult.s
Comment: remainderPrint used once



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

removePower 000000B4

Symbol: removePower
   Definitions
      At line 82 in file DisplayResult.s
   Uses
      At line 87 in file DisplayResult.s
Comment: removePower used once
removePowerTwo 00000114

Symbol: removePowerTwo
   Definitions
      At line 123 in file DisplayResult.s
   Uses
      At line 128 in file DisplayResult.s
Comment: removePowerTwo used once
start 00000000

Symbol: start
   Definitions
      At line 8 in file DisplayResult.s
   Uses
      At line 5 in file DisplayResult.s
Comment: start used once
startProgram 00000000

Symbol: startProgram
   Definitions
      At line 10 in file DisplayResult.s
   Uses
      At line 273 in file DisplayResult.s
Comment: startProgram used once
stop 000002E4

Symbol: stop
   Definitions
      At line 294 in file DisplayResult.s
   Uses
      At line 294 in file DisplayResult.s
Comment: stop used once
subDivide 0000018C

Symbol: subDivide
   Definitions
      At line 168 in file DisplayResult.s
   Uses
      At line 173 in file DisplayResult.s
Comment: subDivide used once
subtractExp 0000017C

Symbol: subtractExp
   Definitions
      At line 159 in file DisplayResult.s
   Uses
      At line 145 in file DisplayResult.s
Comment: subtractExp used once
subtractOperator 0000007C

Symbol: subtractOperator



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 58 in file DisplayResult.s
   Uses
      At line 37 in file DisplayResult.s
Comment: subtractOperator used once
36 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

getkey 00000000

Symbol: getkey
   Definitions
      At line 3 in file DisplayResult.s
   Uses
      At line 19 in file DisplayResult.s
      At line 93 in file DisplayResult.s

main 00000000

Symbol: main
   Definitions
      At line 2 in file DisplayResult.s
   Uses
      None
Comment: main unused
sendchar 00000000

Symbol: sendchar
   Definitions
      At line 4 in file DisplayResult.s
   Uses
      At line 26 in file DisplayResult.s
      At line 71 in file DisplayResult.s
      At line 73 in file DisplayResult.s
      At line 75 in file DisplayResult.s
      At line 98 in file DisplayResult.s
      At line 112 in file DisplayResult.s
      At line 114 in file DisplayResult.s
      At line 116 in file DisplayResult.s
      At line 133 in file DisplayResult.s
      At line 136 in file DisplayResult.s
      At line 138 in file DisplayResult.s
      At line 230 in file DisplayResult.s
      At line 245 in file DisplayResult.s
      At line 247 in file DisplayResult.s
      At line 249 in file DisplayResult.s
      At line 251 in file DisplayResult.s
      At line 253 in file DisplayResult.s
      At line 255 in file DisplayResult.s
      At line 257 in file DisplayResult.s
      At line 259 in file DisplayResult.s
      At line 261 in file DisplayResult.s
      At line 263 in file DisplayResult.s
      At line 265 in file DisplayResult.s
      At line 271 in file DisplayResult.s
      At line 278 in file DisplayResult.s
      At line 280 in file DisplayResult.s
      At line 282 in file DisplayResult.s
      At line 284 in file DisplayResult.s
      At line 286 in file DisplayResult.s
      At line 288 in file DisplayResult.s
      At line 290 in file DisplayResult.s
      At line 292 in file DisplayResult.s

3 symbols
377 symbols in table
