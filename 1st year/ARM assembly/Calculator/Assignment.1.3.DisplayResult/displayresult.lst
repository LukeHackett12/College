


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             DisplayResult, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000                 IMPORT           getkey
    4 00000000                 IMPORT           sendchar
    5 00000000                 EXPORT           start
    6 00000000                 PRESERVE8
    7 00000000         
    8 00000000         start
    9 00000000         
   10 00000000         startProgram                         ; do 
   11 00000000         ; {
   12 00000000         
   13 00000000 E3A0300A        LDR              R3, =10
   14 00000004 E3A04000        LDR              R4,=0       ; number1
   15 00000008 E3A06000        LDR              R6, =0      ; number2
   16 0000000C E3A07000        LDR              R7, =0      ; operator
   17 00000010         
   18 00000010         read
   19 00000010 EBFFFFFE        BL               getkey      ; read key from con
                                                            sole
   20 00000014 E350000D        CMP              R0, #0x0D   ; while (key != ent
                                                            er)
   21 00000018 0A00001D        BEQ              endReadAgain ; {
   22 0000001C E350001B        CMP              R0, #0x1B
   23 00000020 0A000051        BEQ              endProgram
   24 00000024 EBFFFFFE        BL               sendchar    ;   echo key back t
                                                            o console
   25 00000028         
   26 00000028         ;
   27 00000028         ; do any necessary processing of the key
   28 00000028         ;
   29 00000028         
   30 00000028 E350002A        CMP              R0, #'*'    ;if(input == '*')
   31 0000002C 0A000009        BEQ              multiplyOperator ; multiplyOper
                                                            ator()
   32 00000030 E350002B        CMP              R0, #'+'    ;else if(input == '
                                                            +')
   33 00000034 0A000009        BEQ              addOperator ; addOperator()
   34 00000038 E350002D        CMP              R0, #'-'    ;else if(input == '
                                                            -')
   35 0000003C 0A000009        BEQ              subtractOperator ; subtractOper
                                                            ator()
   36 00000040 E350002F        CMP              R0, #'/'    ;else if(input == '
                                                            /')
   37 00000044 0A000009        BEQ              divideOperator 
                                                            ; divideOperator()
   38 00000048         
   39 00000048 E0040493        MUL              R4, R3, R4  ; number1 *= 10
   40 0000004C E2400030        SUB              R0, R0, #0x30 ; input -= 48
   41 00000050 E0804004        ADD              R4, R0, R4  ; number1 += input
   42 00000054         
   43 00000054 EAFFFFED        B                read        ; read next digit
   44 00000058         
   45 00000058         multiplyOperator                     ; int multiplyOpera
                                                            tor()
   46 00000058 E3A07001        LDR              R7,= 1      ;  operator = 1;
   47 0000005C EA000004        B                endRead
   48 00000060         
   49 00000060         addOperator                          ; int addOperator()



ARM Macro Assembler    Page 2 


                                                            
   50 00000060 E3A07002        LDR              R7,= 2      ;  operator = 2
   51 00000064 EA000002        B                endRead
   52 00000068         
   53 00000068         subtractOperator                     ; subtractOperator(
                                                            )
   54 00000068 E3A07003        LDR              R7,= 3      ;  operator = 3
   55 0000006C EA000000        B                endRead
   56 00000070         
   57 00000070         divideOperator                       ; divideOperator()
   58 00000070 E3A07004        LDR              R7,= 4      ;  operator = 4
   59 00000074         
   60 00000074         endRead
   61 00000074         
   62 00000074         readAgain
   63 00000074         
   64 00000074 EBFFFFFE        BL               getkey      ; read key from con
                                                            sole
   65 00000078 E350000D        CMP              R0, #0x0D   ; while (key != ent
                                                            er)
   66 0000007C 0A000004        BEQ              endReadAgain ; {
   67 00000080 EBFFFFFE        BL               sendchar    ;   echo key back t
                                                            o console
   68 00000084         
   69 00000084         ;
   70 00000084         ; do any necessary processing of the key
   71 00000084         ;
   72 00000084         
   73 00000084 E0060693        MUL              R6, R3, R6  ; number2 *= 10
   74 00000088 E2400030        SUB              R0, R0, #0x30 ; input -= 48
   75 0000008C E0806006        ADD              R6, R0, R6  ; number2 += input
   76 00000090         
   77 00000090 EAFFFFF7        B                readAgain
   78 00000094         
   79 00000094         endReadAgain
   80 00000094         
   81 00000094 E3A0003D        LDR              R0, ='='    ; print '='
   82 00000098 EBFFFFFE        BL               sendchar
   83 0000009C         
   84 0000009C E3570001        CMP              R7,#1       ;if(operator == 1)
   85 000000A0 0A000005        BEQ              multiplyExp ; multiplyExp()
   86 000000A4 E3570002        CMP              R7,#2       ;else if(operator =
                                                            = 2)
   87 000000A8 0A000005        BEQ              addExp      ; addExp()
   88 000000AC E3570003        CMP              R7,#3       ;else if(operator =
                                                            = 3)
   89 000000B0 0A000005        BEQ              subtractExp ; subtractExp()
   90 000000B4 E3570004        CMP              R7,#4       ;else if(operator =
                                                            = 4)
   91 000000B8 0A000005        BEQ              divideExp   ; divideExp()
   92 000000BC         
   93 000000BC         multiplyExp
   94 000000BC E0050694        MUL              R5, R4, R6  ; result = number1 
                                                            * number2
   95 000000C0 EA00000B        B                endCalculate
   96 000000C4         
   97 000000C4         addExp
   98 000000C4 E0845006        ADD              R5, R4, R6  ; result = number1 
                                                            + number2



ARM Macro Assembler    Page 3 


   99 000000C8 EA000009        B                endCalculate
  100 000000CC         
  101 000000CC         subtractExp
  102 000000CC E0445006        SUB              R5, R4, R6  ; result = number1 
                                                            - number2
  103 000000D0 EA000007        B                endCalculate
  104 000000D4         
  105 000000D4         divideExp
  106 000000D4         ;R4 is a, R6 is b. Reuse quotient and remainder from lat
                       er on?
  107 000000D4         ;R5 is quotient and R2 is remainder
  108 000000D4 E3A05000        LDR              R5, =0x0
  109 000000D8 E3A02000        LDR              R2, =0x0
  110 000000DC         
  111 000000DC E1A02004        MOV              R2, R4
  112 000000E0         
  113 000000E0         subDivide
  114 000000E0 E1520006        CMP              R2, R6
  115 000000E4 3A000002        BLO              endCalculate
  116 000000E8 E0422006        SUB              R2, R2, R6
  117 000000EC E2855001        ADD              R5, R5, #1
  118 000000F0 EAFFFFFA        B                subDivide
  119 000000F4         
  120 000000F4         endCalculate
  121 000000F4         
  122 000000F4 E3A0A030        LDR              R10, =0X30  ;ASCII offset
  123 000000F8         
  124 000000F8 E3A08001        LDR              R8, =1      ;testPower = 1
  125 000000FC E3A0C001        LDR              R12, =1     ;numberOfDigits = 1
                                                             
  126 00000100         
  127 00000100         digits                               ;
  128 00000100 E1550008        CMP              R5, R8      ;
  129 00000104 DA000002        BLE              endDigits   ;  while(result > t
                                                            estPower)
  130 00000108         ;   {
  131 00000108 E0080893        MUL              R8, R3, R8  ;    testPower *= 1
                                                            0
  132 0000010C E28CC001        ADD              R12, R12, #1 ;    numberOfDigit
                                                            s += 1
  133 00000110 EAFFFFFA        B                digits      ;    }
  134 00000114         endDigits
  135 00000114         
  136 00000114         print
  137 00000114 E3A08001        MOV              R8, #1      ; testPower = 1
  138 00000118 E3A09001        MOV              R9, #1      ; realPower = 1
  139 0000011C         
  140 0000011C         power
  141 0000011C E1550008        CMP              R5, R8      ; if(result <= test
                                                            Power)
  142 00000120 DA000002        BLE              endPower    ;  end division
  143 00000124         ; else
  144 00000124 E1A09008        MOV              R9, R8      ;   realPower = tes
                                                            tPower
  145 00000128 E0080893        MUL              R8, R3, R8  ;  testPower *= 10
  146 0000012C EAFFFFFA        B                power       ;
  147 00000130         endPower
  148 00000130         
  149 00000130 E3A0B000        LDR              R11, =0     ; quotient 



ARM Macro Assembler    Page 4 


  150 00000134         
  151 00000134         divide
  152 00000134 E1550009        CMP              R5, R9      ; while(remainder >
                                                            = power)
  153 00000138 3A000002        BLO              endDivide   ; {
  154 0000013C E0455009        SUB              R5, R5, R9  ;  result = result 
                                                            - realPower
  155 00000140 E28BB001        ADD              R11, R11, #1 ;  quotient++
  156 00000144 EAFFFFFA        B                divide      ; }
  157 00000148         endDivide
  158 00000148         
  159 00000148 E24CC001        SUB              R12, R12, #1 ; numberOfDigits--
                                                            
  160 0000014C E35C0000        CMP              R12, #0     ; if(numberOfDigits
                                                             == 0)
  161 00000150 0A000002        BEQ              endPrint    ;  end print
  162 00000154         ; else
  163 00000154 E08A000B        ADD              R0, R10, R11 ;  character = ASC
                                                            II offset + quotien
                                                            t
  164 00000158 EBFFFFFE        BL               sendchar    ;  print character
  165 0000015C EAFFFFEC        B                print       ;
  166 00000160         
  167 00000160         endPrint
  168 00000160         
  169 00000160 E3A0000A        LDR              R0, =0xA    ;
  170 00000164 EBFFFFFE        BL               sendchar    ; print new line
  171 00000168         
  172 00000168 EAFFFFA4        B                startProgram ; } while (input !
                                                            = escape key)
  173 0000016C         
  174 0000016C         endProgram
  175 0000016C         
  176 0000016C E3A00047        LDR              R0, =0x47   ; print 'G'
  177 00000170 EBFFFFFE        BL               sendchar
  178 00000174 E3A0006F        LDR              R0, =0x6F   ; print 'o'
  179 00000178 EBFFFFFE        BL               sendchar
  180 0000017C E3A0006F        LDR              R0, =0x6F   ; print 'o'
  181 00000180 EBFFFFFE        BL               sendchar
  182 00000184 E3A00064        LDR              R0, =0x64   ; print 'd'
  183 00000188 EBFFFFFE        BL               sendchar
  184 0000018C E3A00062        LDR              R0, =0x62   ; print 'b'
  185 00000190 EBFFFFFE        BL               sendchar
  186 00000194 E3A00079        LDR              R0, =0x79   ; print 'y'
  187 00000198 EBFFFFFE        BL               sendchar
  188 0000019C E3A00065        LDR              R0, =0x65   ; print 'e'
  189 000001A0 EBFFFFFE        BL               sendchar
  190 000001A4 E3A00021        LDR              R0, =0x21   ; print '!'
  191 000001A8 EBFFFFFE        BL               sendchar
  192 000001AC         
  193 000001AC EAFFFFFE 
                       stop    B                stop
  194 000001B0         
  195 000001B0                 END
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\d
isplayresult.d -o.\displayresult.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\C
MSIS\Include -IC:\Keil_v5\ARM\INC\Philips --predefine="__EVAL SETA 1" --predefi
ne="__MICROLIB SETA 1" --predefine="__UVISION_VERSION SETA 524" --predefine="NO
_CLOCK_SETUP SETA 1" --predefine="NO_EMC_SETUP SETA 1" --predefine="RAM_INTVEC 



ARM Macro Assembler    Page 5 


SETA 1" --predefine="RAM_MODE SETA 1" --predefine="REMAP SETA 1" --list=.\displ
ayresult.lst DisplayResult.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DisplayResult 00000000

Symbol: DisplayResult
   Definitions
      At line 1 in file DisplayResult.s
   Uses
      None
Comment: DisplayResult unused
addExp 000000C4

Symbol: addExp
   Definitions
      At line 97 in file DisplayResult.s
   Uses
      At line 87 in file DisplayResult.s
Comment: addExp used once
addOperator 00000060

Symbol: addOperator
   Definitions
      At line 49 in file DisplayResult.s
   Uses
      At line 33 in file DisplayResult.s
Comment: addOperator used once
digits 00000100

Symbol: digits
   Definitions
      At line 127 in file DisplayResult.s
   Uses
      At line 133 in file DisplayResult.s
Comment: digits used once
divide 00000134

Symbol: divide
   Definitions
      At line 151 in file DisplayResult.s
   Uses
      At line 156 in file DisplayResult.s
Comment: divide used once
divideExp 000000D4

Symbol: divideExp
   Definitions
      At line 105 in file DisplayResult.s
   Uses
      At line 91 in file DisplayResult.s
Comment: divideExp used once
divideOperator 00000070

Symbol: divideOperator
   Definitions
      At line 57 in file DisplayResult.s
   Uses
      At line 37 in file DisplayResult.s
Comment: divideOperator used once
endCalculate 000000F4

Symbol: endCalculate



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 120 in file DisplayResult.s
   Uses
      At line 95 in file DisplayResult.s
      At line 99 in file DisplayResult.s
      At line 103 in file DisplayResult.s
      At line 115 in file DisplayResult.s

endDigits 00000114

Symbol: endDigits
   Definitions
      At line 134 in file DisplayResult.s
   Uses
      At line 129 in file DisplayResult.s
Comment: endDigits used once
endDivide 00000148

Symbol: endDivide
   Definitions
      At line 157 in file DisplayResult.s
   Uses
      At line 153 in file DisplayResult.s
Comment: endDivide used once
endPower 00000130

Symbol: endPower
   Definitions
      At line 147 in file DisplayResult.s
   Uses
      At line 142 in file DisplayResult.s
Comment: endPower used once
endPrint 00000160

Symbol: endPrint
   Definitions
      At line 167 in file DisplayResult.s
   Uses
      At line 161 in file DisplayResult.s
Comment: endPrint used once
endProgram 0000016C

Symbol: endProgram
   Definitions
      At line 174 in file DisplayResult.s
   Uses
      At line 23 in file DisplayResult.s
Comment: endProgram used once
endRead 00000074

Symbol: endRead
   Definitions
      At line 60 in file DisplayResult.s
   Uses
      At line 47 in file DisplayResult.s
      At line 51 in file DisplayResult.s
      At line 55 in file DisplayResult.s

endReadAgain 00000094



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols


Symbol: endReadAgain
   Definitions
      At line 79 in file DisplayResult.s
   Uses
      At line 21 in file DisplayResult.s
      At line 66 in file DisplayResult.s

multiplyExp 000000BC

Symbol: multiplyExp
   Definitions
      At line 93 in file DisplayResult.s
   Uses
      At line 85 in file DisplayResult.s
Comment: multiplyExp used once
multiplyOperator 00000058

Symbol: multiplyOperator
   Definitions
      At line 45 in file DisplayResult.s
   Uses
      At line 31 in file DisplayResult.s
Comment: multiplyOperator used once
power 0000011C

Symbol: power
   Definitions
      At line 140 in file DisplayResult.s
   Uses
      At line 146 in file DisplayResult.s
Comment: power used once
print 00000114

Symbol: print
   Definitions
      At line 136 in file DisplayResult.s
   Uses
      At line 165 in file DisplayResult.s
Comment: print used once
read 00000010

Symbol: read
   Definitions
      At line 18 in file DisplayResult.s
   Uses
      At line 43 in file DisplayResult.s
Comment: read used once
readAgain 00000074

Symbol: readAgain
   Definitions
      At line 62 in file DisplayResult.s
   Uses
      At line 77 in file DisplayResult.s
Comment: readAgain used once
start 00000000

Symbol: start



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 8 in file DisplayResult.s
   Uses
      At line 5 in file DisplayResult.s
Comment: start used once
startProgram 00000000

Symbol: startProgram
   Definitions
      At line 10 in file DisplayResult.s
   Uses
      At line 172 in file DisplayResult.s
Comment: startProgram used once
stop 000001AC

Symbol: stop
   Definitions
      At line 193 in file DisplayResult.s
   Uses
      At line 193 in file DisplayResult.s
Comment: stop used once
subDivide 000000E0

Symbol: subDivide
   Definitions
      At line 113 in file DisplayResult.s
   Uses
      At line 118 in file DisplayResult.s
Comment: subDivide used once
subtractExp 000000CC

Symbol: subtractExp
   Definitions
      At line 101 in file DisplayResult.s
   Uses
      At line 89 in file DisplayResult.s
Comment: subtractExp used once
subtractOperator 00000068

Symbol: subtractOperator
   Definitions
      At line 53 in file DisplayResult.s
   Uses
      At line 35 in file DisplayResult.s
Comment: subtractOperator used once
27 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

getkey 00000000

Symbol: getkey
   Definitions
      At line 3 in file DisplayResult.s
   Uses
      At line 19 in file DisplayResult.s
      At line 64 in file DisplayResult.s

main 00000000

Symbol: main
   Definitions
      At line 2 in file DisplayResult.s
   Uses
      None
Comment: main unused
sendchar 00000000

Symbol: sendchar
   Definitions
      At line 4 in file DisplayResult.s
   Uses
      At line 24 in file DisplayResult.s
      At line 67 in file DisplayResult.s
      At line 82 in file DisplayResult.s
      At line 164 in file DisplayResult.s
      At line 170 in file DisplayResult.s
      At line 177 in file DisplayResult.s
      At line 179 in file DisplayResult.s
      At line 181 in file DisplayResult.s
      At line 183 in file DisplayResult.s
      At line 185 in file DisplayResult.s
      At line 187 in file DisplayResult.s
      At line 189 in file DisplayResult.s
      At line 191 in file DisplayResult.s

3 symbols
368 symbols in table
