


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             DisplayResult, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000                 IMPORT           getkey
    4 00000000                 IMPORT           sendchar
    5 00000000                 EXPORT           start
    6 00000000                 PRESERVE8
    7 00000000         
    8 00000000         start
    9 00000000         
   10 00000000         startProgram                         ; do 
   11 00000000         ; {
   12 00000000         
   13 00000000 E3A0300A        LDR              R3, =10
   14 00000004 E3A04000        LDR              R4,=0       ; number1
   15 00000008 E3A06000        LDR              R6, =0      ; number2
   16 0000000C E3A07000        LDR              R7, =0      ; operator
   17 00000010         
   18 00000010         read
   19 00000010 EBFFFFFE        BL               getkey      ; read key from con
                                                            sole
   20 00000014 E350001B        CMP              R0, #0x1B   ; 
   21 00000018 0A000082        BEQ              endProgram  ; 
   22 0000001C E350000D        CMP              R0, #0x0D   ; while (key != ent
                                                            er)
   23 00000020 0A00003C        BEQ              endReadAgain ; {
   24 00000024 E3500008        CMP              R0, #0x8    ;   if(key == backs
                                                            pace)
   25 00000028 0A000015        BEQ              backspace   ;    check()
   26 0000002C EBFFFFFE        BL               sendchar    ;   echo key back t
                                                            o console
   27 00000030         
   28 00000030         ;
   29 00000030         ; do any necessary processing of the key
   30 00000030         ;
   31 00000030         
   32 00000030 E350002A        CMP              R0, #'*'    ;if(input == '*')
   33 00000034 0A00000A        BEQ              multiplyOperator ; multiplyOper
                                                            ator()
   34 00000038 E350002B        CMP              R0, #'+'    ;else if(input == '
                                                            +')
   35 0000003C 0A00000A        BEQ              addOperator ; addOperator()
   36 00000040 E350002D        CMP              R0, #'-'    ;else if(input == '
                                                            -')
   37 00000044 0A00000A        BEQ              subtractOperator ; subtractOper
                                                            ator()
   38 00000048 E350002F        CMP              R0, #'/'    ;else if(input == '
                                                            /')
   39 0000004C 0A00000A        BEQ              divideOperator 
                                                            ; divideOperator()
   40 00000050         
   41 00000050 E0040493        MUL              R4, R3, R4  ; number1 *= 10
   42 00000054 E2400030        SUB              R0, R0, #0x30 ; input -= ASCII 
                                                            Offset
   43 00000058 E1A05000        MOV              R5, R0      ; lastDigit = input
                                                            
   44 0000005C E0804004        ADD              R4, R0, R4  ; number1 += input
   45 00000060         
   46 00000060 EAFFFFEA        B                read        ; read next digit
   47 00000064         



ARM Macro Assembler    Page 2 


   48 00000064         multiplyOperator                     ; int multiplyOpera
                                                            tor()
   49 00000064 E3A07001        LDR              R7,= 1      ;  operator = 1;
   50 00000068 EA000012        B                endRead
   51 0000006C         
   52 0000006C         addOperator                          ; int addOperator()
                                                            
   53 0000006C E3A07002        LDR              R7,= 2      ;  operator = 2
   54 00000070 EA000010        B                endRead
   55 00000074         
   56 00000074         subtractOperator                     ; subtractOperator(
                                                            )
   57 00000074 E3A07003        LDR              R7,= 3      ;  operator = 3
   58 00000078 EA00000E        B                endRead
   59 0000007C         
   60 0000007C         divideOperator                       ; divideOperator()
   61 0000007C E3A07004        LDR              R7,= 4      ;  operator = 4
   62 00000080 EA00000C        B                endRead
   63 00000084         
   64 00000084         backspace
   65 00000084 EBFFFFFE        BL               sendchar    ; print backspace
   66 00000088 E3A00020        LDR              R0, =0x20   ;
   67 0000008C EBFFFFFE        BL               sendchar    ; print space
   68 00000090 E3A00008        LDR              R0, =0x8    ; 
   69 00000094 EBFFFFFE        BL               sendchar    ; print backspace
   70 00000098 E0444005        SUB              R4, R4, R5  ; number2 -= lastDi
                                                            git
   71 0000009C         
   72 0000009C E1A05004        MOV              R5, R4      ; R5 is now equal t
                                                            o the number to div
                                                            ide
   73 000000A0         
   74 000000A0 E3A04000        LDR              R4, =0      ; number1 = quotien
                                                            t
   75 000000A4         
   76 000000A4         removePower
   77 000000A4 E355000A        CMP              R5, #10     ; while(remainder >
                                                            = power)
   78 000000A8 3AFFFFD8        BLO              read        ; {
   79 000000AC E245500A        SUB              R5, R5, #10 ;  remainder = rema
                                                            inder - 10
   80 000000B0 E2844001        ADD              R4, R4, #1  ;  number1++
   81 000000B4 EAFFFFFA        B                removePower ; }
   82 000000B8         
   83 000000B8         endRead
   84 000000B8         
   85 000000B8         readAgain
   86 000000B8         
   87 000000B8 EBFFFFFE        BL               getkey      ; read key from con
                                                            sole
   88 000000BC E350000D        CMP              R0, #0x0D   ; while (key != ent
                                                            er)
   89 000000C0 0A000014        BEQ              endReadAgain ; {
   90 000000C4 E3500008        CMP              R0, #0x8    ;   if(key == backs
                                                            pace)
   91 000000C8 0A000005        BEQ              backspaceSecond ;    check()
   92 000000CC EBFFFFFE        BL               sendchar    ; echo key back to 
                                                            console
   93 000000D0         



ARM Macro Assembler    Page 3 


   94 000000D0         ;
   95 000000D0         ; do any necessary processing of the key
   96 000000D0         ;
   97 000000D0         
   98 000000D0 E0060693        MUL              R6, R3, R6  ; number2 *= 10
   99 000000D4 E2400030        SUB              R0, R0, #0x30 ; input -= 48
  100 000000D8 E1A05000        MOV              R5, R0      ; lastDigit = input
                                                            
  101 000000DC E0806006        ADD              R6, R0, R6  ; number2 += input
  102 000000E0         
  103 000000E0 EAFFFFF4        B                readAgain
  104 000000E4         
  105 000000E4         backspaceSecond
  106 000000E4 EBFFFFFE        BL               sendchar    ; print backspace
  107 000000E8 E3A00020        LDR              R0, =0x20   ;
  108 000000EC EBFFFFFE        BL               sendchar    ; print space
  109 000000F0 E3A00008        LDR              R0, =0x8    ; 
  110 000000F4 EBFFFFFE        BL               sendchar    ; print backspace
  111 000000F8 E0466005        SUB              R6, R6, R5  ; number 2 -= lastD
                                                            igit
  112 000000FC         
  113 000000FC E1A05006        MOV              R5, R6      ; R5 now equal char
                                                            acter to divide
  114 00000100         
  115 00000100 E3A06000        LDR              R6, =0      ; number2 = quotien
                                                            t
  116 00000104         
  117 00000104         removePowerTwo
  118 00000104 E355000A        CMP              R5, #10     ; while(remainder >
                                                            = power)
  119 00000108 3AFFFFEA        BLO              readAgain   ; {
  120 0000010C E245500A        SUB              R5, R5, #10 ;  remainder = rema
                                                            inder - 10
  121 00000110 E2866001        ADD              R6, R6, #1  ;  number2++
  122 00000114 EAFFFFFA        B                removePowerTwo ; }
  123 00000118         
  124 00000118         endReadAgain
  125 00000118         
  126 00000118 E3A05000        LDR              R5, =0x0    ; result = 0
  127 0000011C E3A0003D        LDR              R0, ='='    ; print '='
  128 00000120 EBFFFFFE        BL               sendchar
  129 00000124         
  130 00000124 E3570001        CMP              R7,#1       ;if(operator == 1)
  131 00000128 0A000005        BEQ              multiplyExp ; multiplyExp()
  132 0000012C E3570002        CMP              R7,#2       ;else if(operator =
                                                            = 2)
  133 00000130 0A000005        BEQ              addExp      ; addExp()
  134 00000134 E3570003        CMP              R7,#3       ;else if(operator =
                                                            = 3)
  135 00000138 0A000005        BEQ              subtractExp ; subtractExp()
  136 0000013C E3570004        CMP              R7,#4       ;else if(operator =
                                                            = 4)
  137 00000140 0A000005        BEQ              divideExp   ; divideExp()
  138 00000144         
  139 00000144         multiplyExp
  140 00000144 E0050694        MUL              R5, R4, R6  ; result = number1 
                                                            * number2
  141 00000148 EA00000A        B                endCalculate
  142 0000014C         



ARM Macro Assembler    Page 4 


  143 0000014C         addExp
  144 0000014C E0845006        ADD              R5, R4, R6  ; result = number1 
                                                            + number2
  145 00000150 EA000008        B                endCalculate
  146 00000154         
  147 00000154         subtractExp
  148 00000154 E0445006        SUB              R5, R4, R6  ; result = number1 
                                                            - number2
  149 00000158 EA000006        B                endCalculate
  150 0000015C         
  151 0000015C         divideExp
  152 0000015C E3A02000        LDR              R2, =0x0    ; remainder = 0
  153 00000160         
  154 00000160 E1A02004        MOV              R2, R4      ; remainder = numbe
                                                            r1
  155 00000164         
  156 00000164         subDivide                            ; 
  157 00000164 E1520006        CMP              R2, R6      ; while(remainder >
                                                            = number2)
  158 00000168 3A000002        BLO              endCalculate ; {
  159 0000016C E0422006        SUB              R2, R2, R6  ;  remainder -= num
                                                            ber2
  160 00000170 E2855001        ADD              R5, R5, #1  ;  result += 1
  161 00000174 EAFFFFFA        B                subDivide   ; }
  162 00000178         
  163 00000178         endCalculate
  164 00000178         
  165 00000178 E3A0A030        LDR              R10, =0X30  ;ASCII offset
  166 0000017C         
  167 0000017C E3A08001        LDR              R8, =1      ;testPower = 1
  168 00000180 E3A0C001        LDR              R12, =1     ;numberOfDigits = 1
                                                             
  169 00000184         
  170 00000184         digits                               ;
  171 00000184 E1550008        CMP              R5, R8      ;
  172 00000188 DA000002        BLE              endDigits   ;  while(result > t
                                                            estPower)
  173 0000018C         ;   {
  174 0000018C E0080893        MUL              R8, R3, R8  ;    testPower *= 1
                                                            0
  175 00000190 E28CC001        ADD              R12, R12, #1 ;    numberOfDigit
                                                            s += 1
  176 00000194 EAFFFFFA        B                digits      ;    }
  177 00000198         endDigits
  178 00000198         
  179 00000198         print
  180 00000198 E3A08001        MOV              R8, #1      ; testPower = 1
  181 0000019C E3A09001        MOV              R9, #1      ; realPower = 1
  182 000001A0         
  183 000001A0         power
  184 000001A0 E1550008        CMP              R5, R8      ; if(result <= test
                                                            Power)
  185 000001A4 DA000002        BLE              endPower    ;  end division
  186 000001A8         ; else
  187 000001A8 E1A09008        MOV              R9, R8      ;   realPower = tes
                                                            tPower
  188 000001AC E0080893        MUL              R8, R3, R8  ;  testPower *= 10
  189 000001B0 EAFFFFFA        B                power       ;
  190 000001B4         endPower



ARM Macro Assembler    Page 5 


  191 000001B4         
  192 000001B4 E3A0B000        LDR              R11, =0     ; quotient 
  193 000001B8         
  194 000001B8         divide
  195 000001B8 E1550009        CMP              R5, R9      ; while(remainder >
                                                            = power)
  196 000001BC 3A000002        BLO              endDivide   ; {
  197 000001C0 E0455009        SUB              R5, R5, R9  ;  result = result 
                                                            - realPower
  198 000001C4 E28BB001        ADD              R11, R11, #1 ;  quotient++
  199 000001C8 EAFFFFFA        B                divide      ; }
  200 000001CC         endDivide
  201 000001CC         
  202 000001CC E24CC001        SUB              R12, R12, #1 ; numberOfDigits--
                                                            
  203 000001D0 E35C0000        CMP              R12, #0     ; if(numberOfDigits
                                                             == 0)
  204 000001D4 0A000002        BEQ              endPrint    ;  end print
  205 000001D8         ; else
  206 000001D8 E08A000B        ADD              R0, R10, R11 ;  character = ASC
                                                            II offset + quotien
                                                            t
  207 000001DC EBFFFFFE        BL               sendchar    ;  print character
  208 000001E0 EAFFFFEC        B                print       ;
  209 000001E4         
  210 000001E4         endPrint
  211 000001E4         
  212 000001E4 E3570004        CMP              R7, #4
  213 000001E8 1A00000B        BNE              notDiv
  214 000001EC E3A0002E        LDR              R0, =0x2E   ; print '.'
  215 000001F0 EBFFFFFE        BL               sendchar
  216 000001F4 E3A0002E        LDR              R0, =0x2E   ; print '.'
  217 000001F8 EBFFFFFE        BL               sendchar
  218 000001FC E3A0002E        LDR              R0, =0x2E   ; print '.'
  219 00000200 EBFFFFFE        BL               sendchar
  220 00000204 E3A00069        LDR              R0, =0x69   ; print 'i'
  221 00000208 EBFFFFFE        BL               sendchar
  222 0000020C E3A00073        LDR              R0, =0x73   ; print 's'
  223 00000210 EBFFFFFE        BL               sendchar
  224 00000214 E3A00068        LDR              R0, =0x68   ; print 'h'
  225 00000218 EBFFFFFE        BL               sendchar
  226 0000021C         
  227 0000021C         notDiv
  228 0000021C E3A0000A        LDR              R0, =0xA    ;
  229 00000220 EBFFFFFE        BL               sendchar    ; print new line
  230 00000224         
  231 00000224 EAFFFF75        B                startProgram ; } while (input !
                                                            = escape key)
  232 00000228         
  233 00000228         endProgram
  234 00000228         
  235 00000228 E3A00047        LDR              R0, =0x47   ; print 'G'
  236 0000022C EBFFFFFE        BL               sendchar
  237 00000230 E3A0006F        LDR              R0, =0x6F   ; print 'o'
  238 00000234 EBFFFFFE        BL               sendchar
  239 00000238 E3A0006F        LDR              R0, =0x6F   ; print 'o'
  240 0000023C EBFFFFFE        BL               sendchar
  241 00000240 E3A00064        LDR              R0, =0x64   ; print 'd'
  242 00000244 EBFFFFFE        BL               sendchar



ARM Macro Assembler    Page 6 


  243 00000248 E3A00062        LDR              R0, =0x62   ; print 'b'
  244 0000024C EBFFFFFE        BL               sendchar
  245 00000250 E3A00079        LDR              R0, =0x79   ; print 'y'
  246 00000254 EBFFFFFE        BL               sendchar
  247 00000258 E3A00065        LDR              R0, =0x65   ; print 'e'
  248 0000025C EBFFFFFE        BL               sendchar
  249 00000260 E3A00021        LDR              R0, =0x21   ; print '!'
  250 00000264 EBFFFFFE        BL               sendchar
  251 00000268         
  252 00000268 EAFFFFFE 
                       stop    B                stop
  253 0000026C         
  254 0000026C                 END
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\d
isplayresult.d -o.\displayresult.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\C
MSIS\Include -IC:\Keil_v5\ARM\INC\Philips --predefine="__EVAL SETA 1" --predefi
ne="__MICROLIB SETA 1" --predefine="__UVISION_VERSION SETA 524" --predefine="NO
_CLOCK_SETUP SETA 1" --predefine="NO_EMC_SETUP SETA 1" --predefine="RAM_INTVEC 
SETA 1" --predefine="RAM_MODE SETA 1" --predefine="REMAP SETA 1" --list=.\displ
ayresult.lst DisplayResult.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DisplayResult 00000000

Symbol: DisplayResult
   Definitions
      At line 1 in file DisplayResult.s
   Uses
      None
Comment: DisplayResult unused
addExp 0000014C

Symbol: addExp
   Definitions
      At line 143 in file DisplayResult.s
   Uses
      At line 133 in file DisplayResult.s
Comment: addExp used once
addOperator 0000006C

Symbol: addOperator
   Definitions
      At line 52 in file DisplayResult.s
   Uses
      At line 35 in file DisplayResult.s
Comment: addOperator used once
backspace 00000084

Symbol: backspace
   Definitions
      At line 64 in file DisplayResult.s
   Uses
      At line 25 in file DisplayResult.s
Comment: backspace used once
backspaceSecond 000000E4

Symbol: backspaceSecond
   Definitions
      At line 105 in file DisplayResult.s
   Uses
      At line 91 in file DisplayResult.s
Comment: backspaceSecond used once
digits 00000184

Symbol: digits
   Definitions
      At line 170 in file DisplayResult.s
   Uses
      At line 176 in file DisplayResult.s
Comment: digits used once
divide 000001B8

Symbol: divide
   Definitions
      At line 194 in file DisplayResult.s
   Uses
      At line 199 in file DisplayResult.s
Comment: divide used once
divideExp 0000015C

Symbol: divideExp



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 151 in file DisplayResult.s
   Uses
      At line 137 in file DisplayResult.s
Comment: divideExp used once
divideOperator 0000007C

Symbol: divideOperator
   Definitions
      At line 60 in file DisplayResult.s
   Uses
      At line 39 in file DisplayResult.s
Comment: divideOperator used once
endCalculate 00000178

Symbol: endCalculate
   Definitions
      At line 163 in file DisplayResult.s
   Uses
      At line 141 in file DisplayResult.s
      At line 145 in file DisplayResult.s
      At line 149 in file DisplayResult.s
      At line 158 in file DisplayResult.s

endDigits 00000198

Symbol: endDigits
   Definitions
      At line 177 in file DisplayResult.s
   Uses
      At line 172 in file DisplayResult.s
Comment: endDigits used once
endDivide 000001CC

Symbol: endDivide
   Definitions
      At line 200 in file DisplayResult.s
   Uses
      At line 196 in file DisplayResult.s
Comment: endDivide used once
endPower 000001B4

Symbol: endPower
   Definitions
      At line 190 in file DisplayResult.s
   Uses
      At line 185 in file DisplayResult.s
Comment: endPower used once
endPrint 000001E4

Symbol: endPrint
   Definitions
      At line 210 in file DisplayResult.s
   Uses
      At line 204 in file DisplayResult.s
Comment: endPrint used once
endProgram 00000228

Symbol: endProgram



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 233 in file DisplayResult.s
   Uses
      At line 21 in file DisplayResult.s
Comment: endProgram used once
endRead 000000B8

Symbol: endRead
   Definitions
      At line 83 in file DisplayResult.s
   Uses
      At line 50 in file DisplayResult.s
      At line 54 in file DisplayResult.s
      At line 58 in file DisplayResult.s
      At line 62 in file DisplayResult.s

endReadAgain 00000118

Symbol: endReadAgain
   Definitions
      At line 124 in file DisplayResult.s
   Uses
      At line 23 in file DisplayResult.s
      At line 89 in file DisplayResult.s

multiplyExp 00000144

Symbol: multiplyExp
   Definitions
      At line 139 in file DisplayResult.s
   Uses
      At line 131 in file DisplayResult.s
Comment: multiplyExp used once
multiplyOperator 00000064

Symbol: multiplyOperator
   Definitions
      At line 48 in file DisplayResult.s
   Uses
      At line 33 in file DisplayResult.s
Comment: multiplyOperator used once
notDiv 0000021C

Symbol: notDiv
   Definitions
      At line 227 in file DisplayResult.s
   Uses
      At line 213 in file DisplayResult.s
Comment: notDiv used once
power 000001A0

Symbol: power
   Definitions
      At line 183 in file DisplayResult.s
   Uses
      At line 189 in file DisplayResult.s
Comment: power used once
print 00000198




ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

Symbol: print
   Definitions
      At line 179 in file DisplayResult.s
   Uses
      At line 208 in file DisplayResult.s
Comment: print used once
read 00000010

Symbol: read
   Definitions
      At line 18 in file DisplayResult.s
   Uses
      At line 46 in file DisplayResult.s
      At line 78 in file DisplayResult.s

readAgain 000000B8

Symbol: readAgain
   Definitions
      At line 85 in file DisplayResult.s
   Uses
      At line 103 in file DisplayResult.s
      At line 119 in file DisplayResult.s

removePower 000000A4

Symbol: removePower
   Definitions
      At line 76 in file DisplayResult.s
   Uses
      At line 81 in file DisplayResult.s
Comment: removePower used once
removePowerTwo 00000104

Symbol: removePowerTwo
   Definitions
      At line 117 in file DisplayResult.s
   Uses
      At line 122 in file DisplayResult.s
Comment: removePowerTwo used once
start 00000000

Symbol: start
   Definitions
      At line 8 in file DisplayResult.s
   Uses
      At line 5 in file DisplayResult.s
Comment: start used once
startProgram 00000000

Symbol: startProgram
   Definitions
      At line 10 in file DisplayResult.s
   Uses
      At line 231 in file DisplayResult.s
Comment: startProgram used once
stop 00000268

Symbol: stop



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 252 in file DisplayResult.s
   Uses
      At line 252 in file DisplayResult.s
Comment: stop used once
subDivide 00000164

Symbol: subDivide
   Definitions
      At line 156 in file DisplayResult.s
   Uses
      At line 161 in file DisplayResult.s
Comment: subDivide used once
subtractExp 00000154

Symbol: subtractExp
   Definitions
      At line 147 in file DisplayResult.s
   Uses
      At line 135 in file DisplayResult.s
Comment: subtractExp used once
subtractOperator 00000074

Symbol: subtractOperator
   Definitions
      At line 56 in file DisplayResult.s
   Uses
      At line 37 in file DisplayResult.s
Comment: subtractOperator used once
32 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

getkey 00000000

Symbol: getkey
   Definitions
      At line 3 in file DisplayResult.s
   Uses
      At line 19 in file DisplayResult.s
      At line 87 in file DisplayResult.s

main 00000000

Symbol: main
   Definitions
      At line 2 in file DisplayResult.s
   Uses
      None
Comment: main unused
sendchar 00000000

Symbol: sendchar
   Definitions
      At line 4 in file DisplayResult.s
   Uses
      At line 26 in file DisplayResult.s
      At line 65 in file DisplayResult.s
      At line 67 in file DisplayResult.s
      At line 69 in file DisplayResult.s
      At line 92 in file DisplayResult.s
      At line 106 in file DisplayResult.s
      At line 108 in file DisplayResult.s
      At line 110 in file DisplayResult.s
      At line 128 in file DisplayResult.s
      At line 207 in file DisplayResult.s
      At line 215 in file DisplayResult.s
      At line 217 in file DisplayResult.s
      At line 219 in file DisplayResult.s
      At line 221 in file DisplayResult.s
      At line 223 in file DisplayResult.s
      At line 225 in file DisplayResult.s
      At line 229 in file DisplayResult.s
      At line 236 in file DisplayResult.s
      At line 238 in file DisplayResult.s
      At line 240 in file DisplayResult.s
      At line 242 in file DisplayResult.s
      At line 244 in file DisplayResult.s
      At line 246 in file DisplayResult.s
      At line 248 in file DisplayResult.s
      At line 250 in file DisplayResult.s

3 symbols
373 symbols in table
