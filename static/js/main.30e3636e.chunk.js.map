{"version":3,"sources":["components/FirebaseInitialiser.js","pages/Login.js","components/Sidebar.js","components/PostBoard.js","pages/Profile.js","components/ContactsList.js","components/AddContactModal.js","pages/Contacts.js","serviceWorker.js","index.js","assets/img/logo.png"],"names":["init","firebase","length","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Login","props","loadProfile","creds","a","console","log","key","i","user","uid","charCodeAt","crypt","Crypt","self","db","collection","doc","email","get","then","exists","decryptedBytes","aesjs","ModeOfOperation","ctr","decrypt","data","privateKey","toUint8Array","utils","utf8","fromBytes","decryptedPostKey","postKey","message","split","map","val","parseInt","setState","loggedIn","userUid","userName","displayName","userPhoto","photoURL","userEmail","userToken","credential","idToken","userPublicKey","publicKey","userPrivateKey","friends","requested","RSA","generateKeyPairAsync","keyPair","aesCtr","privBytes","toBytes","encryptedPriv","encrypt","Array","from","Math","floor","random","encryptedPostKey","Blob","fromUint8Array","set","catch","err","responseGoogle","response","GoogleAuthProvider","tc","id_token","signInWithCredential","error","errorCode","code","errorMessage","responseFacebook","FacebookAuthProvider","accessToken","require","config","debug","state","this","className","to","pathname","Container","Row","Col","Card","Body","clientId","render","renderProps","onClick","disabled","onSuccess","onFailure","cookiePolicy","autoLoad","cssClass","icon","style","textSpacing","callback","src","logo","alt","backgroundColor","paddingTop","height","React","Component","CustomToggle","forwardRef","ref","children","href","e","preventDefault","Sidebar","acceptFriend","name","profilePic","res","tempRequested","filter","obj","push","friendDoc","declineFriend","where","listenForFriendRequests","onSnapshot","docSnap","loadContacts","fluid","id","role","Dropdown","paddingLeft","Toggle","as","color","Menu","xs","md","lg","sm","width","Button","padding","PostBoard","postMessage","event","postBytes","value","encryptedPost","post","timestamp","Date","now","content","poster","handleChange","target","posts","listenForPosts","snapshot","docs","docCon","friendPostKey","forEach","friend","encrypted","toText","TextDecoder","decode","onSubmit","type","placeholder","onChange","ListGroup","index","Item","margin","Profile","location","Header","ContactsList","customStyles","top","left","right","bottom","marginRight","transform","AddContactModal","Modal","setAppElement","isOpen","showModal","contentLabel","people","addFriend","handleCloseModal","Contacts","req","bind","contacts","per","photoUrl","paddingBottom","marginBottom","Boolean","window","hostname","match","routing","path","component","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.30e3636e.chunk.js","sourcesContent":["import * as firebase from \"firebase\";\n\nexport function init() {\n    if (!firebase.apps.length) {\n      firebase.initializeApp({\n        apiKey: process.env.REACT_APP_firebase_api_key,\n        authDomain: \"crest-f8474.firebaseapp.com\",\n        databaseURL: \"https://crest-f8474.firebaseio.com\",\n        projectId: \"crest-f8474\",\n        storageBucket: \"crest-f8474.appspot.com\",\n        messagingSenderId: \"229758778420\",\n        appId: \"1:229758778420:web:3c4cfcf53a4634a13d1e61\",\n        measurementId: \"G-DC2XXBEFJK\"\n      });\n    }\n  }","import logo from \"../assets/img/logo.png\";\n\nimport React from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport * as firebase from \"firebase\";\nimport aesjs from \"aes-js\";\n\nimport { Container, Row, Col, Card } from \"react-bootstrap\";\nimport { GoogleLogin } from \"react-google-login\";\nimport FacebookLogin from \"react-facebook-login\";\nimport { Crypt, RSA } from \"hybrid-crypto-js\";\nimport { init } from \"../components/FirebaseInitialiser\";\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n\n    require(\"dotenv\").config({ debug: true });\n\n    this.state = {\n      loggedIn: false,\n      friends: [],\n      userUid: null,\n      userName: null,\n      userPhoto: null,\n      userEmail: null,\n      userToken: null\n    };\n\n    init();\n  }\n\n  loadProfile = async creds => {\n    console.log(creds);\n\n    let key = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\n    for (let i = 0; i < key.length; i++) {\n      key[i] = creds.user.uid.charCodeAt(i);\n    }\n\n    var crypt = new Crypt();\n    var self = this;\n    var db = firebase.firestore();\n\n    let userDoc = db.collection(\"users\").doc(creds.user.email);\n    userDoc\n      .get()\n      .then(doc => {\n        if (!doc.exists) {\n          var rsa = new RSA();\n\n          let publicKey;\n          let privateKey;\n\n          rsa.generateKeyPairAsync().then(keyPair => {\n            publicKey = keyPair.publicKey;\n            privateKey = keyPair.privateKey;\n          }).then(() => {\n            var aesCtr = new aesjs.ModeOfOperation.ctr(key);\n            var privBytes = aesjs.utils.utf8.toBytes(privateKey);\n            var encryptedPriv = aesCtr.encrypt(privBytes);\n\n            var postKey = Array.from({length: 32}, () => Math.floor(Math.random() * 256));\n            var encryptedPostKey = crypt.encrypt(publicKey, postKey);\n\n            let data = {\n              displayName: creds.user.displayName,\n              photoURL: creds.user.photoURL,\n              email: creds.user.email,\n              publicKey: publicKey,\n              privateKey: firebase.firestore.Blob.fromUint8Array(encryptedPriv),\n              postKey : encryptedPostKey,\n              friends: [],\n              requested: []\n            };\n\n            db.collection(\"users\")\n            .doc(creds.user.email)\n            .set(data)\n            .then(() =>\n              self.setState({\n                loggedIn: true,\n                userUid: creds.user.uid,\n                userName: creds.user.displayName,\n                userPhoto: creds.user.photoURL,\n                userEmail: creds.user.email,\n                userToken: creds.credential.idToken,\n                userPublicKey: publicKey,\n                userPrivateKey: privateKey,\n                postKey: postKey,\n                friends: [],\n                requested: []\n              })\n            );\n          })\n        } else {\n          var aesCtr = new aesjs.ModeOfOperation.ctr(key);\n          var decryptedBytes = aesCtr.decrypt(doc.data().privateKey.toUint8Array());\n          var privateKey = aesjs.utils.utf8.fromBytes(decryptedBytes)\n\n          var decryptedPostKey = crypt.decrypt(privateKey, doc.data().postKey).message.split(\",\").map(val => { return parseInt(val) })\n\n          self.setState({\n            loggedIn: true,\n            userUid: creds.user.uid,\n            userName: creds.user.displayName,\n            userPhoto: creds.user.photoURL,\n            userEmail: creds.user.email,\n            userToken: creds.credential.idToken,\n            userPublicKey: doc.data().publicKey,\n            userPrivateKey: privateKey,\n            postKey: decryptedPostKey,\n            friends: doc.data().friends,\n            requested: doc.data().requested\n          });\n        }\n      })\n      .catch(err => {\n        console.log(\"Error getting document\", err);\n      });\n  };\n\n  responseGoogle = response => {\n    console.log(response);\n    var credential = firebase.auth.GoogleAuthProvider.credential(\n      response.tc.id_token\n    );\n\n    var self = this;\n\n    firebase\n      .auth()\n      .signInWithCredential(credential)\n      .then( creds => self.loadProfile(creds))\n      .catch(function(error) {\n        // Handle Errors here.\n        var errorCode = error.code;\n        var errorMessage = error.message;\n        // The email of the user's account used.\n        var email = error.email;\n        // The firebase.auth.AuthCredential type that was used.\n        var credential = error.credential;\n\n        console.log(\"Error \" + errorCode + \": \" + errorMessage);\n        console.log(\"Email: \" + email);\n        console.log(\"Credential: \" + credential);\n      });\n  };\n\n  responseFacebook = response => {\n    console.log(response);\n\n    var credential = firebase.auth.FacebookAuthProvider.credential(\n      response.accessToken\n    );\n\n    var self = this;\n\n    firebase\n      .auth()\n      .signInWithCredential(credential)\n      .then(creds => self.loadProfile(creds))\n      .catch(function(error) {\n        // Handle Errors here.\n        var errorCode = error.code;\n        var errorMessage = error.message;\n        // The email of the user's account used.\n        var email = error.email;\n        // The firebase.auth.AuthCredential type that was used.\n        var credential = error.credential;\n\n        console.log(\"Error \" + errorCode + \": \" + errorMessage);\n        console.log(\"Email: \" + email);\n        console.log(\"Credential: \" + credential);\n      });\n  };\n\n  render() {\n    const {\n      loggedIn,\n      userUid,\n      userName,\n      userPhoto,\n      userEmail,\n      userToken,\n      userPublicKey,\n      userPrivateKey,\n      friends,\n      requested,\n      postKey\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        {loggedIn && (\n          <Redirect\n            to={{\n              pathname: \"/profile\",\n              state: {\n                userUid: userUid,\n                userName: userName,\n                userPhoto: userPhoto,\n                userEmail: userEmail,\n                userToken: userToken,\n                userPublicKey: userPublicKey,\n                userPrivateKey: userPrivateKey,\n                postKey: postKey,\n                friends: friends,\n                requested: requested\n              }\n            }}\n          />\n        )}\n\n        <Container>\n          <Row className=\"justify-content-center\">\n            <Col className=\"col-md-9 col-lg-12 col-xl-10 justify-content-center\">\n              <Card className=\"shadow-lg o-hidden border-0 my-5 justify-content-center\">\n                <Card.Body className=\"p-0 justify-content-center\">\n                  <Row className=\"justify-content-center\">\n                    <Col className=\"col-lg-6 justify-content-center\">\n                      <div className=\"p-5 justify-content-center\">\n                        <div className=\"text-center justify-content-center\">\n                          <h4 className=\"text-dark mb-4\">Secure Social</h4>\n                        </div>\n                        <GoogleLogin\n                          clientId=\"229758778420-kfodakij699oncpbvaoppge2hj56oe6f.apps.googleusercontent.com\"\n                          render={renderProps => (\n                            <button\n                              onClick={renderProps.onClick}\n                              disabled={renderProps.disabled}\n                              className=\"btn btn-primary btn-block text-white btn-google btn-user\"\n                            >\n                              <i className=\"fab fa-google\"></i>&nbsp; Login with\n                              Google\n                            </button>\n                          )}\n                          onSuccess={this.responseGoogle}\n                          onFailure={this.responseGoogle}\n                          cookiePolicy={\"single_host_origin\"}\n                        />\n                        <FacebookLogin\n                          appId=\"649543218885961\"\n                          autoLoad={false}\n                          cssClass=\"btn btn-primary btn-block text-white btn-facebook btn-user\"\n                          icon=\"fa-facebook\"\n                          style={{ textSpacing: \"10px\" }}\n                          callback={this.responseFacebook}\n                        />\n                      </div>\n                    </Col>\n                    <Col className=\"col-lg-6 justify-content-center\">\n                      <img\n                        src={logo}\n                        alt=\"logo\"\n                        style={{\n                          backgroundColor: \"transparent\",\n                          paddingTop: \"5vh\",\n                          height: \"30vh\"\n                        }}\n                      />\n                    </Col>\n                  </Row>\n                </Card.Body>\n              </Card>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import React from 'react';\nimport { Redirect } from \"react-router-dom\";\nimport * as firebase from \"firebase\";\nimport { Container, Col, Row, Button, Dropdown} from \"react-bootstrap\";\nimport { Crypt } from \"hybrid-crypto-js\";\n\nconst CustomToggle = React.forwardRef(({ children, onClick }, ref) => (\n  <a\n    href=\"/\"\n    ref={ref}\n    onClick={e => {\n      e.preventDefault();\n      onClick(e);\n    }}\n  >\n    {children}\n  </a>\n));\n\nclass Sidebar extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = this.props.state;\n  }\n\n  componentDidMount(){\n    this.listenForFriendRequests();\n  }\n\n  componentDidUpdate() {\n    this.listenForFriendRequests();\n  }\n\n  listenForFriendRequests() {\n    let db = firebase.firestore();\n    let doc = db.collection(\"users\").doc(this.state.userEmail);\n\n    doc.onSnapshot(\n      docSnap => {\n        let data = docSnap.data();\n        this.setState({ requested: data.requested, friends: data.friends});\n      },\n      err => {\n        console.log(`Encountered error: ${err}`);\n      }\n    );\n  }\n\n  acceptFriend = (email, name, postKey, profilePic, publicKey) => {\n    let db = firebase.firestore();\n    let doc = db.collection(\"users\").doc(this.state.userEmail);\n\n    let crypt = new Crypt()\n    postKey = crypt.decrypt(this.state.userPrivateKey, postKey).message.split(\",\").map(val => { return parseInt(val)})\n\n    doc.get()\n    .then(res => res.data())\n    .then(data => { \n      let tempRequested = data.requested.filter(function( obj ) {\n        return obj.email !== email;\n      });\n      data.requested = tempRequested\n      return data\n    })\n    .then(data => {\n      data.friends.push({email: email, \n                        name: name, \n                        profilePic: profilePic, \n                        postKey: crypt.encrypt(this.state.userPublicKey, postKey),\n                      })\n      return data\n    })\n    .then(data => doc.set(data))\n\n    let friendDoc = db.collection(\"users\").doc(email)\n    friendDoc.get()\n    .then(res => res.data())\n    .then(data => {\n      data.friends.push({email: this.state.userEmail,\n                          name: this.state.userName,\n                          profilePic: this.state.userPhoto,\n                          postKey: crypt.encrypt(publicKey, this.state.postKey)})\n      return data\n    })\n    .then(data => friendDoc.set(data))\n  }\n\n  declineFriend = email => {\n    let db = firebase.firestore();\n    let doc = db.collection(\"users\").where(\"email\", \"==\", email);\n    doc.get()\n    .then(res => res.data())\n    .then(data => { \n      let tempRequested = data.requested.filter(function( obj ) {\n        return obj.email !== email;\n      });\n\n      data.requested = tempRequested\n      return data\n    })\n    .then(data => doc.set(data))\n  }\n\n  render(){\n    const {\n      requested,\n      loadContacts, \n      loadProfile,\n      userEmail,\n      userName,\n      userPhoto,\n      userToken,\n      userPublicKey,\n      userPrivateKey,\n      postKey,\n      userUid,\n      friends\n      } = this.state\n\n    return(\n      <div>\n      {loadProfile && (\n        <Redirect\n          to={{\n            pathname: \"/profile\",\n            state: {\n              userUid: userUid,\n              userName: userName,\n              userPhoto: userPhoto,\n              userEmail: userEmail,\n              userToken: userToken,\n              userPublicKey: userPublicKey,\n              userPrivateKey: userPrivateKey,\n              postKey: postKey,\n              friends: friends\n            }\n          }}\n        />\n      )}\n\n      {loadContacts && (\n        <Redirect\n          to={{\n            pathname: \"/contacts\",\n            state: {\n              userUid: userUid,\n              userName: userName,\n              userPhoto: userPhoto,\n              userEmail: userEmail,\n              userToken: userToken,\n              userPublicKey: userPublicKey,\n              userPrivateKey: userPrivateKey,\n              postKey: postKey,\n              friends: friends,\n              requested: requested\n            }\n          }}\n        />\n      )}\n    <nav className=\"navbar navbar-dark align-items-start sidebar sidebar-dark accordion bg-gradient-primary p-0\">\n          <Container\n            fluid={true}\n            className=\"container-fluid d-flex flex-column p-0\"\n          >\n            <div className=\"navbar-brand d-flex justify-content-center align-items-center sidebar-brand m-0\">\n              <div className=\"sidebar-brand-icon rotate-n-15\">\n                <i className=\"fas fa-laugh-wink\"></i>\n              </div>\n              <div className=\"sidebar-brand-text mx-3\">\n                <span>Secure Social</span>\n              </div>\n            </div>\n            <hr className=\"sidebar-divider my-0\" />\n            <ul className=\"nav navbar-nav text-light\" id=\"accordionSidebar\">\n              <li className=\"nav-item\" role=\"presentation\">\n                <div className=\"nav-link\"\n                  onClick={() => this.setState({ loadProfile: true, loadContacts: false })}\n                >\n                  <i className=\"fas fa-user\"></i>\n                  <span>Profile</span>\n                </div>\n              </li>\n              <li className=\"nav-item\" role=\"presentation\">\n                <div\n                  className=\"nav-link\"\n                  onClick={() => this.setState({ loadContacts: true, loadProfile: false })}\n                >\n                  <i className=\"fas fa-user-lock\"></i>\n                  <span>Contacts</span>\n                </div>\n              </li>\n              <li>\n                <Dropdown style={{ paddingLeft: \"8%\" }}>\n                  <Dropdown.Toggle as={CustomToggle} id=\"dropdown-basic\">\n                    <i\n                      style={{ color: \"white\", paddingTop: \"10%\" }}\n                      className=\"fas fa-user-friends\"\n                    ></i>\n                    <span className=\"badge badge-danger badge-counter\">\n                      {requested ? requested.length : 0}\n                    </span>\n                  </Dropdown.Toggle>\n\n                  <Dropdown.Menu >\n                    {requested &&\n                      requested.map(({ email, name, postKey, profilePic, publicKey }) => (\n                        <div key={email}>\n                          <Container fluid={true} style={{}}>\n                          <Row xs={4} md={6} lg={8}>\n                            <Col sm>\n                              <img style={{width: \"20px\", height: \"auto\"}} src={profilePic} alt=\"Profile\" />\n                            </Col>\n                            <Col sm>\n                              {name}\n                            </Col>\n                            <Col sm className=\"m-0 p-0\">\n                              <Button style={{width: \"20px\", height: \"20px\", padding:\"0\"}} className=\"fas fa-plus\" onClick={()=> this.acceptFriend(email, name, postKey, profilePic, publicKey)}/>\n                            </Col>\n                            <Col sm className=\"m-0 p-0\">\n                              <Button style={{width: \"20px\", height: \"20px\", padding:\"0\"}} className=\"fas fa-times\" onClick={()=> this.declineFriend(email)}/>\n                            </Col>\n                          </Row>\n                          </Container>\n                          <hr/>\n                        </div>\n                      ))}\n                  </Dropdown.Menu>\n                </Dropdown>\n              </li>\n            </ul>\n            <div className=\"text-center d-none d-md-inline\"></div>\n          </Container>\n        </nav>\n        </div>\n    )}\n}\n\nexport default Sidebar;\n","import React from \"react\";\nimport * as firebase from \"firebase\";\nimport aesjs from \"aes-js\";\nimport { Crypt } from \"hybrid-crypto-js\";\n\nimport { Button, Col, Row, ListGroup } from \"react-bootstrap\";\n\nclass PostBoard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: \"\",\n      posts: [],\n      collection: firebase.firestore().collection(\"posts\"),\n      db: firebase.firestore()\n    };\n  }\n\n  postMessage = event => {\n    event.preventDefault();\n    var aesCtr = new aesjs.ModeOfOperation.ctr(this.props.postKey);\n    var postBytes = aesjs.utils.utf8.toBytes(this.state.value);\n    var encryptedPost = aesCtr.encrypt(postBytes);\n\n    let post = {\n      timestamp: Date.now(),\n      content: firebase.firestore.Blob.fromUint8Array(encryptedPost),\n      poster: {\n        name: this.props.userName,\n        email: this.props.email,\n        profilePic: this.props.userPhoto\n      }\n    };\n\n    this.state.db\n      .collection(\"posts\")\n      .doc()\n      .set(post);\n  };\n\n  handleChange = event => {\n    this.setState({ value: event.target.value });\n  };\n\n  componentDidMount() {\n    this.listenForPosts();\n  }\n\n  async componentDidUpdate() {\n    await this.listenForPosts();\n  }\n\n  async listenForPosts() {\n    let self = this;\n    let crypt = new Crypt();\n\n    const snapshot = await firebase\n      .firestore()\n      .collection(\"posts\")\n      .get();\n    let data = snapshot.docs.map(doc => {\n      let docCon = doc.data()\n      let friendPostKey = null;\n      self.props.friends.forEach(friend => {\n        if (friend.email === docCon.poster.email) {\n          friendPostKey = crypt\n            .decrypt(self.props.userPrivateKey, friend.postKey)\n            .message.split(\",\")\n            .map(val => {\n              return parseInt(val);\n            });\n\n          var aesCtr = new aesjs.ModeOfOperation.ctr(friendPostKey);\n          var decryptedBytes = aesCtr.decrypt(docCon.content.toUint8Array());\n          var post = aesjs.utils.utf8.fromBytes(decryptedBytes);\n          docCon.content = post;\n        }\n      });\n\n      if (docCon.poster.email === self.props.email) {\n        var aesCtr = new aesjs.ModeOfOperation.ctr(self.props.postKey);\n        var decryptedBytes = aesCtr.decrypt(docCon.content.toUint8Array());\n        var post = aesjs.utils.utf8.fromBytes(decryptedBytes);\n\n        docCon.content = post;\n      } else {\n        var encrypted = docCon.content.toUint8Array();\n        var toText = new TextDecoder('utf-8').decode(encrypted);\n        docCon.content = \"Encrypted: \" + toText;\n      }\n\n      return docCon\n    });\n\n    this.setState({ posts: data });\n\n    /*\n    this.state.collection.onSnapshot(\n      collSnap => {\n        let data = collSnap.docs;\n        data.forEach(doc => doc.data());\n        if (data.length !== self.state.posts.length) {\n          data.forEach(async function(doc) {\n            getMarker();\n            /*\n            self.state.collection\n              .doc(doc.id)\n              .get()\n              .then(res => res.data())\n              .then(docCon => {\n                let friendPostKey = null;\n                self.props.friends.forEach(friend => {\n                  if (friend.email === docCon.poster.email) {\n                    friendPostKey = crypt\n                      .decrypt(self.props.userPrivateKey, friend.postKey)\n                      .message.split(\",\")\n                      .map(val => {\n                        return parseInt(val);\n                      });\n\n                    var aesCtr = new aesjs.ModeOfOperation.ctr(friendPostKey);\n                    var decryptedBytes = aesCtr.decrypt(\n                      docCon.content.toUint8Array()\n                    );\n                    var post = aesjs.utils.utf8.fromBytes(decryptedBytes);\n                    docCon.content = post;\n                  }\n                });\n\n                if (docCon.poster.email === self.props.email) {\n                  var aesCtr = new aesjs.ModeOfOperation.ctr(\n                    self.props.postKey\n                  );\n                  var decryptedBytes = aesCtr.decrypt(\n                    docCon.content.toUint8Array()\n                  );\n                  var post = aesjs.utils.utf8.fromBytes(decryptedBytes);\n\n                  docCon.content = post;\n                }\n\n                var contains = false;\n                for (post in posts) {\n                  if (post.timestamp === docCon.timestamp) {\n                    contains = true;\n                  }\n                }\n\n                if (!contains) posts.push(docCon);\n\n                if (posts.length === data.length) {\n                  self.setState({ posts: posts });\n                }\n              });\n          });\n        }\n      },\n      err => {\n        console.log(`Encountered error: ${err}`);\n      }\n    );\n    */\n  }\n\n  render() {\n    const { value, posts } = this.state;\n\n    return (\n      <div>\n        <form\n          className=\"form-inline d-none d-sm-inline-block mr-auto ml-md-3 my-2 my-md-0 mw-100 navbar-search\"\n          style={{ width: \"95%\" }}\n          onSubmit={this.postMessage}\n        >\n          <div className=\"input-group\">\n            <input\n              id=\"username\"\n              type=\"text\"\n              className=\"bg-light form-control border-0 small\"\n              placeholder=\"New Post...\"\n              value={value}\n              onChange={this.handleChange}\n            />\n            <div className=\"input-group-append\">\n              <Button\n                className=\"btn btn-primary py-0\"\n                type=\"submit\"\n                value=\"Send\"\n              >\n                <i className=\"fas fa-paper-plane\"></i>\n              </Button>\n            </div>\n          </div>\n        </form>\n        <ListGroup>\n          {posts &&\n            posts.map((post, index) => (\n              <ListGroup.Item key={index}>\n                <Row>\n                  <Col sm style={{ margin: \"0px\" }}>\n                    <img\n                      src={post.poster.profilePic}\n                      style={{ width: \"24px\", height: \"auto\" }}\n                      alt=\"Profile\"\n                    />\n                  </Col>\n                  <Col xs={10}>{post.content}</Col>\n                </Row>\n              </ListGroup.Item>\n            ))}\n        </ListGroup>\n      </div>\n    );\n  }\n}\n\nexport default PostBoard;\n","import React from \"react\";\nimport { Container, Col, Row, Card } from \"react-bootstrap\";\n\nimport Sidebar from '../components/Sidebar'\nimport PostBoard from '../components/PostBoard'\nimport { init } from \"../components/FirebaseInitialiser\";\n\nclass Profile extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = this.props.location.state;\n\n    init();\n  }\n\n  render() {\n    const {\n      userEmail,\n      userName,\n      userPhoto,\n      friends,\n      postKey,\n      userPrivateKey\n    } = this.state;\n\n    return (\n      <div id=\"wrapper\">\n        <Sidebar state={this.state}/>\n        <Col className=\"d-flex flex-column\">\n          <Container fluid={true}>\n            <Row className=\"row mb-3\">\n              <Col className=\"col-lg-4\">\n                <Card className=\"card mb-3\">\n                  <Card.Body className=\"text-center shadow\">\n                    <img\n                      className=\"rounded-circle mb-3 mt-4\"\n                      src={userPhoto}\n                      alt=\"Profile\"\n                      width=\"160\"\n                      height=\"160\"\n                    />\n                  </Card.Body>\n                </Card>\n                <Card className=\"card shadow mb-4\">\n                  <Card.Header className=\"card-header py3\">\n                    <h6 className=\"text-primary font-weight-bold m-0\">\n                      Profile Information\n                    </h6>\n                  </Card.Header>\n                  <Card.Body>\n                    <Row>Name: {userName}</Row>\n                    <Row>Email Address: {userEmail}</Row>\n                    <Row>Friends: {friends.length}</Row>\n                  </Card.Body>\n                </Card>\n              </Col>\n              <Col className=\"col-lg-8\">\n                <Row className=\"row\">\n                  <Col className=\"col\">\n                    <Card className=\"card shadow mb-3\">\n                      <Card.Header>Post Board</Card.Header>\n                      <PostBoard userName={userName} userPhoto={userPhoto} friends={friends} postKey={postKey} userPrivateKey={userPrivateKey} email={userEmail}/>\n                    </Card>\n                  </Col>\n                </Row>\n              </Col>\n            </Row>\n          </Container>\n        </Col>\n      </div>\n    );\n  }\n}\n\nexport default Profile;\n","import React from \"react\";\n\nimport { Col, Row, ListGroup } from \"react-bootstrap\";\n\nclass ContactsList extends React.Component {\n  render() {\n    return (\n      <ListGroup>\n        {this.props.friends &&\n          this.props.friends.map(({ userEmail, name, profilePic }) => (\n            <ListGroup.Item key={userEmail}>\n              <Row>\n                <Col>\n                  <img\n                    src={profilePic}\n                    alt=\"Profile\"\n                    style={{\n                      width: \"64px\",\n                      height: \"auto\"\n                    }}\n                  />\n                </Col>\n                <Col>{name}</Col>\n                <Col>{userEmail}</Col>\n              </Row>\n            </ListGroup.Item>\n          ))}\n      </ListGroup>\n    );\n  }\n}\n\nexport default ContactsList;","import React from \"react\";\nimport Modal from \"react-modal\";\nimport { Col, Row, Button, ListGroup } from \"react-bootstrap\";\n\nconst customStyles = {\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    width: \"40%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\"\n  }\n};\n\nclass AddContactModal extends React.Component {\n  render() {\n    Modal.setAppElement(\"#root\");\n\n    return (\n      <Modal\n        isOpen={this.props.showModal}\n        contentLabel=\"Add Contact\"\n        style={customStyles}\n      >\n        <h4>Add Contact</h4>\n        <hr />\n        <ListGroup>\n          {this.props.people &&\n            this.props.people.map(\n              ({ displayName, photoURL, email, publicKey }) =>\n                (\n                  <ListGroup.Item\n                    key={email}\n                    onClick={() => this.props.addFriend(email, publicKey)}\n                  >\n                    <Row>\n                      <Col>\n                        <img\n                          src={photoURL}\n                          alt=\"Profile\"\n                          style={{\n                            width: \"32px\",\n                            height: \"auto\"\n                          }}\n                        />\n                      </Col>\n                      <Col>{displayName}</Col>\n                      <Col>{email}</Col>\n                    </Row>\n                  </ListGroup.Item>\n                )\n            )}\n        </ListGroup>\n        <hr />\n        <Button onClick={this.props.handleCloseModal}>close</Button>\n      </Modal>\n    );\n  }\n}\n\nexport default AddContactModal;\n","import React from \"react\";\nimport * as firebase from \"firebase\";\nimport { Container, Col, Row, Card, Button } from \"react-bootstrap\";\nimport { Crypt } from 'hybrid-crypto-js';\n\nimport Sidebar from \"../components/Sidebar\";\nimport ContactsList from \"../components/ContactsList\";\nimport AddContactModal from \"../components/AddContactModal\";\nimport { init } from \"../components/FirebaseInitialiser\";\n\nclass Contacts extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = this.props.location.state;\n\n    this.handleCloseModal = this.handleCloseModal.bind(this);\n    init();\n  }\n\n  componentDidMount() {\n    this.setState({ showModal: false});\n  }\n\n  componentDidUpdate() {\n    let people = [];\n    let contacts = this;\n    var db = firebase.firestore();\n\n    db.collection(\"users\")\n      .get()\n      .then(res => {\n        res.docs.forEach((doc, index) => {\n          let fDoc = db\n            .collection(\"users\")\n            .doc(doc.id)\n            .get()\n            .then(per => {\n              if (per.id !== this.state.userEmail) {\n                people.push({displayName: per.data().displayName, photoUrl: per.data().photoURL, email: per.id, publicKey: per.data().publicKey});\n              }\n\n              if(index === res.docs.length-1) {\n                contacts.setState({people: people})\n              }\n            })\n          return fDoc;\n        });\n      })\n  }\n\n  handleCloseModal() {\n    this.setState({ showModal: false });\n  }\n\n  addFriend = (userEmail, publicKey) => {\n    //Add friend to user, state: pending\n    let crypt = new Crypt();\n\n    var db = firebase.firestore();\n    db.collection(\"users\")\n      .doc(userEmail)\n      .get()\n      .then(res => {console.log(res); return res})\n      .then(res => res.data())\n      .then(doc => {\n        console.log(doc);\n        let req = doc.requested;\n        req.push({\n          email: this.state.userEmail,\n          name: this.state.userName,\n          profilePic: this.state.userPhoto,\n          publicKey: this.state.userPublicKey,\n          postKey: crypt.encrypt(publicKey, this.state.postKey)\n        });\n\n        doc.requested = req;\n        db.collection(\"users\")\n        .doc(userEmail)\n        .set(doc);\n      });\n  };\n\n  render() {\n    const { friends, people, showModal } = this.state;\n\n    return (\n      <div id=\"wrapper\">\n        <Sidebar state={this.state} />\n        <Col className=\"d-flex flex-column\">\n          <Container fluid={true}>\n            <h3 className=\"text-dark mb-4\">Contacts</h3>\n            <Row className=\"row mb-3\">\n              <Col className=\"col\">\n                <Row className=\"row\">\n                  <Col className=\"col\">\n                    <Card className=\"card shadow\">\n                      <Card.Header>\n                        <Row>\n                          <Col\n                            style={{\n                              paddingTop: 0,\n                              paddingBottom: 0,\n                              marginBottom: 0\n                            }}\n                          >\n                            <h5 className=\"text-dark mt-2\">Contacts</h5>\n                          </Col>\n                          <Col className=\"justify-content-right pull-right\">\n                            <Button\n                              className=\"btn-primary pull-right float-right\"\n                              onClick={() => this.setState({ showModal: true })}\n                            >\n                              Add Contact\n                            </Button>\n                            <AddContactModal\n                              people={people}\n                              showModal={showModal}\n                              handleCloseModal={this.handleCloseModal}\n                              addFriend={this.addFriend}\n                            />\n                          </Col>\n                        </Row>\n                      </Card.Header>\n                      <Card.Body>\n                        <Container>\n                          <ContactsList friends={friends} />\n                        </Container>\n                      </Card.Body>\n                    </Card>\n                  </Col>\n                </Row>\n              </Col>\n            </Row>\n          </Container>\n        </Col>\n      </div>\n    );\n  }\n}\n\nexport default Contacts;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Route, HashRouter as Router } from \"react-router-dom\";\n\nimport \"./assets/css/index.css\";\nimport \"./assets/bootstrap/css/bootstrap.min.css\";\nimport \"./assets/fonts/fontawesome-all.min.css\";\n\nimport Login from \"./pages/Login\";\nimport Profile from \"./pages/Profile\";\nimport Contacts from \"./pages/Contacts\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst routing = (\n  <Router>\n    <div>\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/profile\" component={Profile} />\n      <Route path=\"/contacts\" component={Contacts} />\n    </div>\n  </Router>\n);\nReactDOM.render(routing, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.bef441a2.png\";"],"sourceRoot":""}